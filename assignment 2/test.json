[
    {
        "Id": "4",
        "Text": "<p>I have seen two dissenting opinions on this subject (and in my opinion, the first option is right):</p><ol><li><p>By definition, a Sudoku has only one solution. Anything else is just a grid of numbers. Sometimes, there are errors in a publication, and a starting grid has multiple solutions, but, then the starting grid was not a Sudoku!</p></li><li><p><a href=\"http://en.wikipedia.org/wiki/Sudoku\" rel=\"noreferrer\">From Wikipedia</a>: <em>The number of classic 9×9 Sudoku solution grids is 6,670,903,752,021,072,936,960, or approximately 6.67×10<sup>21</sup> (ignoring rotations and other factors, there are many fewer solutions, just 5,472,730,538</em></p></li></ol><p>Assuming you define a sudoku to have just one possible solution, then the rest of your questions are moot.</p><p>If the sudoku is defined to have multiple solutions, then, brute-forcing is one way, but it is also possible to pre-compute all possible solutions for all inputs, and look up the result that way (a <a href=\"http://en.wikipedia.org/wiki/Rainbow_table\" rel=\"noreferrer\">rainbow table</a>). </p>",
        "Score": "28"
    },
    {
        "Id": "5",
        "Text": "<p>By definition, all valid Sudoku puzzles should have only one solution. In point of fact, many of the techniques used for solving puzzles <em>depend</em> on there being only one solution. All of the Unique Rectangle techniques for example, only work if there is one, and only one, solution.</p>",
        "Score": "12"
    },
    {
        "Id": "6",
        "Text": "<p>Most Sudoku puzzles published have only one solution. If there is more than one solution, it is probably a mistake. That said, puzzles with incomplete clues can have multiple solutions. In the extreme case, a puzzle with no clues has 6,670,903,752,021,072,936,960 solutions according to <a href=\"http://en.wikipedia.org/wiki/Sudoku\">Wikipedia</a>.</p><p>I don't know if it's possible to have exactly 3 solutions, but boards with 2 and 4 (and more) solutions are easy to find. In general, I think boards with an even number of solutions are easier to create.</p><p>Finding the number of solutions is a generalization of Sudoku solving algorithms, and there are Sudoku algorithms that do significantly better than brute forcing. Once the board has been filled out as far as possible, it can be brute forced the rest of the way.</p>",
        "Score": "44"
    },
    {
        "Id": "8",
        "Text": "<blockquote class=\"spoiler\">  <p> 8.</p></blockquote><p>Because:</p><blockquote class=\"spoiler\">  <p> Obviously, you can't have more than 8, since you would have a row (and column) with more than one queen on it.</p></blockquote><p>According to <a href=\"http://mathworld.wolfram.com/QueensProblem.html\" rel=\"noreferrer\">Wolfram-Alpha</a>, there are </p><blockquote class=\"spoiler\">  <p> 12 unique solutions, plus an additional 80 solutions from rotation/reflection.</p></blockquote><p>One possible solution is:</p><blockquote class=\"spoiler\">  <p> <img src=\"https://i.stack.imgur.com/npc8B.gif\" alt=\"8 Queens not attacking each other.  Image from codereview.stackexchange.com\"></p></blockquote><p>A list (and images!) of all </p><blockquote class=\"spoiler\">  <p> 12 base solutions can be found both at the above Wolfram-Alpha link and <a href=\"http://en.wikipedia.org/wiki/Eight_queens_puzzle\" rel=\"noreferrer\">Wikipedia</a>.  (Thank you <a href=\"https://puzzling.stackexchange.com/users/4/kevin\">Kevin</a> for the link). </p></blockquote>",
        "Score": "35"
    },
    {
        "Id": "14",
        "Text": "<p>If by 'guessing' you mean writing down numbers that you are not sure about, then no, every proper puzzle is solvable (in theory) by looking at all the possibilities remaining. This is the brute force algorithm.</p><p>However, some puzzles are complicated enough that you won't be able to remember all the possible values.  This is simply a case of humans having poor short-term memory, and you will require additional resources (like writing down numbers and trying them).</p><p>As you get better and better at solving Sudoku puzzles, your brain recognizes more and more patterns, and when the puzzle you're solving matches one of those patterns, your brain can remember the solution. The more experience you have, the less difficult your reasoning becomes, and the less likely you are to find a puzzle that requires brute forcing.</p>",
        "Score": "4"
    },
    {
        "Id": "15",
        "Text": "<p>TL;DR - short of a definitive mathematical proof, there is no way of knowing.</p><p>If you do a web search for Sudoku solving techniques, you will find that there are a great many. Some of them are difficult and obscure, but handle cases that can't be solved any other way.</p><p>My own experience, using the Sudoku app on my tablet, has been that every puzzle, no matter how difficult, can be solved by some technique, no matter how obscure. So, if you don't know a technique for a given situation, you may be reduced to guessing, but when asked for a hint, my tablet has always had a technique up it's sleeve for every possible situation.</p>",
        "Score": "10"
    },
    {
        "Id": "21",
        "Text": "<p>When you work with a void cube, you've de facto lost a degree of visibility. The algorithm to take you out of this position is <code>M' U M' U' M U' M U2 M'</code> - then you just solve the remaining edges as-is, and I'm going to attempt to briefly explain why this works.</p><p>You, as you know, can no longer see the centers on the void cube. However, it's important to bear in mind that they're actually still there, just hidden. When the 'virtual' centers are rotated incorrectly - that is to say, you're attempting to solve the cube around an invalid position - the pieces won't line up. In the case you're seeing, the centers along one axis have been rotated 90 degrees out of position. </p><p>To see for yourself why this might be, attempt to solve a regular Rubik's cube with one row of centers rotated 90 degrees. You'll find yourself in an equivalent position on the 3x3. (Note: a position which is mathematically equivalent to the one you are in is where two corners are swapped; if you end here, you're in literally the exact same position.)</p><p>This algorithm moves them back into a legal position, and, though it disrupts a couple edges in the process, actually allows you to solve it regularly again.</p><p>This can also be done intuitively. Simply do a middle slice along any face, then keep one corner fixed in your mind relative to the three virtual centers (i.e., keep it in the same place relative to them), and solve the cube again.</p>",
        "Score": "8"
    },
    {
        "Id": "23",
        "Text": "<p>Yes.  The minimum number of pieces required is <strong>5</strong>.</p><p>5 queens can be places such that they cover every space on the board, as in the following example:</p><p><img src=\"https://i.stack.imgur.com/3MsU5.gif\" alt=\"It only takes 5 queens to \"cover\" a full 8x8 chessboard.\"> <img src=\"https://i.stack.imgur.com/EKhvj.png\" alt=\"color coded version\"></p><p>There are 12 such arrangements, along with rotation and reflection of each of them.</p><p>Edit: The above proves that 5 queens is enough, but it doesn't prove that 4 queens isn't enough.  According to <a href=\"https://mathoverflow.net/q/30330/47866\">this MathOverflow question</a> and its answers, there is no easy logical or mathematical proof, but it has been proven by completely evaluating all possible arrangements of queens on a board.  <a href=\"http://oeis.org/A075458\" rel=\"noreferrer\">OEIS sequence A075458</a> gives the minimum number of required queens for any square board from <span class=\"math-container\">$1\\times1$</span> to <span class=\"math-container\">$18\\times18$</span>.</p>",
        "Score": "42"
    },
    {
        "Id": "24",
        "Text": "<p>This is not a rigorous mathematical proof, but I will try to explain it intuitively.</p><p>Think of each corner having a property that is the amount that it's been rotated in 3 dimensions. The whole cube has a property that is the sum of all its corners. Initially everything is at 0.</p><p>When you rotate one side of the cube, you rotate 4 corners a quarter-turn each. This adds up to a total of one full turn. Since rotation wraps around from 360° to 0°, you are back where you started. No matter what move you make, you will always end up with a whole number of full turns.</p><p>Since having a single corner rotated means that the total rotation is not 0, it is impossible to reach that state by making legal moves. However, when you have 3 corners rotated by a third of a turn each, the sum is once again a whole turn. Likewise it is legal to have two corners rotated, but in opposite directions, as the sum is zero.</p><p>Even though it's hard to grasp 3D rotation and summing of angles, the concept should be enough to explain why corners cannot be rotated independently.</p>",
        "Score": "13"
    },
    {
        "Id": "26",
        "Text": "<p>Every <a href=\"http://en.wikipedia.org/wiki/Mathematics_of_Sudoku#Minimum_number_of_givens\">\"proper\" sudoku puzzle</a> which only has one solution can be solved without guessing.</p><p>The only time you would need to guess is when the sudoku puzzle is improper, and thus has multiple possible solutions, and your guesses would be irrelevant to whether the puzzle could be solved.</p><p>And, just so people are aware, improper sudoku puzzles are actually not uncommon. I have a booklet of them on my shelf, so these puzzles are actually used.</p><p>In these cases, the puzzles aren't more challenging necessarily (though they're typically written to be). While improper puzzles <em>can</em> be harder to solve, they are not usually more difficult to solve <em>because</em> they are improper, but rather because the design of the puzzle is more difficult.</p>",
        "Score": "13"
    },
    {
        "Id": "28",
        "Text": "<p>The answer:</p><blockquote class=\"spoiler\">  <p>Turn switches A and B on.  Wait about a minute.  Turn switch B off.  Go to the bulb room.  The bulb that is on corresponds to switch A.  The bulb that is off, but warm, corresponds to switch B.  The bulb that is off, but cold, corresponds to switch C.</p></blockquote><p>The explanation:</p><blockquote class=\"spoiler\">  <p>Incandescent bulbs produce a significant amount of heat.  In the amount of time it takes you to walk from one room to the other, the bulb will have not had time to cool down, unless the rooms are unreasonably large.</p></blockquote>",
        "Score": "36"
    },
    {
        "Id": "31",
        "Text": "<p>If you're first: Go in a corner.</p><p>If you're second, and the first person went in a corner: Go in the middle.</p><p>From both of these positions, it is possible to guarantee no worse than a tie.</p>",
        "Score": "8"
    },
    {
        "Id": "32",
        "Text": "<p>In my experience, it's generally <strong>What is the hardest technique required to solve it.</strong></p><ul><li>Example hardest: <strong>Single Position</strong> - Easy puzzle</li><li>Ex. <strong>Candidate Line</strong> - Medium Puzzle</li><li>Ex. <strong>Naked Pair</strong> - Hard Puzzle</li><li>Ex. <strong>Swordfish</strong> - Very Hard Puzzle</li><li>Ex. <strong>Forcing Chains</strong> - Master Puzzle</li></ul><p>Definitions can be found here: <a href=\"http://www.sudokuoftheday.com/pages/techniques-overview.php\">http://www.sudokuoftheday.com/pages/techniques-overview.php</a></p>",
        "Score": "9"
    },
    {
        "Id": "34",
        "Text": "<p>Modern sudoku puzzles are ranked according to the difficulty of the techniques required to generate a solution. It's important to note that there is no standardized system or metric, but rather, these are based on qualitative assessments.</p><p><a href=\"http://www.playr.co.uk/sudoku/ratings.php\">playr.co.uk</a> lists these requirements for its various ratings:</p><ul><li>Level 1 puzzles can be solved simply by reducing the possibilities of a square to one, and filling it in.</li><li>Level 2 puzzles use the occurrence of pairs of numbers within a block (cell, row, or column). This includes pairs of numbers, number chains, and hidden pairs and chains.</li><li>Level 3 uses the <a href=\"http://www.janko.at/Raetsel/Sudoku/Loesung/X-Wing1.jpg\">X-wing</a> and <a href=\"http://www.brainbashers.com/gifs/sudokuxywing2.gif\">Y-wing</a> techniques, as well as </li><li>Level 4 typically requires Nishio or Forcing Chains (which effectively involve making assumptions and tracing their results)</li><li>Level 5 requires flat-out trial and error or lookup tables.</li></ul>",
        "Score": "16"
    },
    {
        "Id": "35",
        "Text": "<p>The first move can be made anywhere without sacrificing the game. If the opponent plays perfectly, any first move leads to a draw.</p><p>However, if the opponent does not play perfectly, then the optimal place to go is the corner, since that leaves only one spot (the center) for the opponent to go to get a draw, increasing their chance of making a mistake.</p>",
        "Score": "35"
    },
    {
        "Id": "36",
        "Text": "<p><a href=\"https://en.wikipedia.org/wiki/Optimal_solutions_for_Rubik%27s_Cube\" rel=\"nofollow\">It's well known that the diameter of the Cayley graph for Rubik's cube positions is 20.</a></p><p>I think that's the question you were asking. If not, please edit your question to clarify.</p>",
        "Score": "2"
    },
    {
        "Id": "37",
        "Text": "<p>The maximum number of positions a valid Rubik's cube configuration takes to solve is 20, and is called God's Number. No rigorous mathematical proof has been provided for the number; however, every configuration was tried. <a href=\"http://www.cube20.org/\">Cube20</a> gives an explanation of what they did, as well as provides source code for their project. </p><p>They achieved this through a few groups, discovered from other proofs of maximum move counts, which reduced the set of positions that actually needed to be tried significantly. They only needed to solve 55,882,296 positions as a result (they took quite a bit of advantage of symmetry). </p><p>However, without brute-force, this has only been mathematically <a href=\"http://link.springer.com/article/10.1007%2Fs00283-009-9105-3\">proven for 22 moves</a>. </p>",
        "Score": "14"
    },
    {
        "Id": "40",
        "Text": "<p>The number one most important tip in my opinion is to keep your highest tile in one corner, and your next highest tiles adjacent to it. You should only move your top tile from the corner when absolutely necessary.</p>",
        "Score": "3"
    },
    {
        "Id": "41",
        "Text": "<p>Try to line up numbers in descending order on a row of your choice (I prefer the top row), and avoid messing this up at all costs (especially the cell with the biggest number, which should be in a corner).</p><p>Example:</p><p>$$\\begin{array}{|r|r|}\\hline1024 & \\phantom{0}512 & \\phantom{00}16 & \\phantom{000}2 \\\\\\hline2 & 2 & 4 & 2 \\\\\\end{array}\\\\\\text{(etc.)}$$</p><p>A good method for achieving this is to avoid a certain key (i.e., the down key, if your large numbers are in the top row) so that you won't accidentally move a large tile away from the row. Also remember to not use the right key (in this example) unless the top row is full (which it usually is, but be careful after combining tiles on the top row).</p><p>The reasons for this are:</p><ul><li>If you let the tile with your greatest number get out of a corner, it will \"clog\" the board and effectively take away one of your 16 available spaces.</li><li>If you let tiles with large numbers get separated, such as $\\begin{array}{|r|r|} \\hline 1024 & \\phantom{0}512 & \\phantom{000}2 & \\phantom{0}512 \\end{array}$, they will stick around for much longer, get in the way, be hard to combine, and be generally pointless.</li></ul>",
        "Score": "12"
    },
    {
        "Id": "42",
        "Text": "<p>The algorithm you've mentioned is called depth-first generation, and actually, it's quite easy to intuitively demonstrate a way to do this.</p><p>If you have a maze generated via a depth-first algorithm, there is one and only one way to each square. DFS generates a \"perfect\" maze - one without any closed loops, without inaccessible areas, and is simply connected. There is one and only one path from any point to any other point. Thus, the maze has exactly one solution.</p><p>Now take adjacent - but walled - points A and B. There exists a path from the entrance to point A, and there exists a path from point B to the exit. However, because there is a wall between points A and B, there also exists a path which does not go through both A and B that leads to the exit. By removing the wall between A and B, you create a new (second) path through both A and B that leads to the exit, thus creating an alternate path.</p><p>Thus, if you remove <em>any</em> wall in the maze, you create another path, or multiple valid paths. </p><p>Note that this makes your maze imperfect by definition, as there are now two paths from the start to the exit.</p>",
        "Score": "7"
    },
    {
        "Id": "45",
        "Text": "<p>In this case, you can look at the first few moves.  </p><blockquote class=\"spoiler\">  <p> You can't take the fox or the beans, and if you go solo you will come back solo and be back at the start.  For the second move, if you take the goose back you are back where you started, so you come back solo.  You are a long way into the puzzle by then.  </p></blockquote>",
        "Score": "10"
    },
    {
        "Id": "46",
        "Text": "<p>Up until 4096, @Doorknob's solution seems optimum, using a zig zag along one row then back along the next. Once you have a 4096 in one corner, the number of free tiles limits your options if you go for a single direction, though, so the technique I use once I have my bottom row filled (I like my top number at bottom left) is to add to both ends of the next row up as necessary.</p><p>This often lets me sidestep the bottom right tile and double the next one in, and protects against an unlucky sequence of poor number tiles.</p>",
        "Score": "2"
    },
    {
        "Id": "47",
        "Text": "<p>Tic-tac-toe has been solved. The optimal first move is to go in the corner.</p><p>As always, there is a relevant <a href=\"https://xkcd.com/832/\" rel=\"noreferrer\">xkcd</a>.<img src=\"https://imgs.xkcd.com/comics/tic_tac_toe.png\" alt=\"xkcd tic tac toe\"></p>",
        "Score": "56"
    },
    {
        "Id": "49",
        "Text": "<p>In the original game, sometimes the new tile that pops up is a 4. Let's ignore that possibility for the sake of simplicity.</p><p>We've 16 squares in total and considering the new tile popped up at the position we chose, to make it to 4096, we need minimum these tiles: </p><p><code>2048, 1024, 512, 256, 128, 64, 32, 16, 8, 4, 2, 2</code></p><p>These can be combined from right to left to get to 4096. That's a total of 12 tiles. Since that's less than 16 (max number of tiles that can fit),  4096 is possible. Following along:</p><ul><li>8192: <code>4096, 2048, 1024, ..., 4, 2, 2</code> Total 13</li><li>16384: <code>8192, 4096, 2048, ..., 4, 2, 2</code> Total 14</li><li>32768: <code>16384, 8192, 4096, ..., 4, 2, 2</code> Total 15</li><li>65536: <code>32768, 16384, 8192, 4096, ..., 4, 2, 2</code> Total 16</li></ul><p>Next is 131072 which will require at least 17 tiles which can't fit on the board.</p><p><strong>So, the largest possible tile is 65536.</strong></p><p>EDIT: Since the game pops up some 4's at times, <strong>131072 is still theoretically possible</strong> if the last tile that pops up is a 4 making the board look like this:</p><p>131072: <code>65536, 32768, 16384, 8192, 4096, 2048, 1024, 512, 256, 128, 64, 32, 16, 8, 4, 4</code> </p><p>that's 16 tiles in total.</p>",
        "Score": "57"
    },
    {
        "Id": "50",
        "Text": "<p>There is, indeed, a way! No way has yet been found (at least that I've found) to generate them infallibly, though.</p><p>In <a href=\"http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.47.2303&rep=rep1&type=pdf\">a paper</a> by Y. Murase, H. Matsubara, and Y. Higara, called \"Automatic Making of Sokoban Puzzles\", they explain exactly how one makes unique puzzles. While their algorithm isn't perfect (about half of the puzzles they generated aren't solvable), it offers a significant statistical advantage over other possible methods.</p><p>In essence, they rely on three basic templates which are applied over a basic template which statistically are likely to generate solvable situations. Then, they mark specific spaces as invalid for both goals and boxes. </p><p>Goals are generated first, as boxes' positions are restricted by the goals. Invalid positions for goals can be categorized by checking each direction; if there is no valid way to push a box into the goal from any direction, that position cannot be a goal.</p><p>Then, crates are marked. The majority of invalid crate positions are those in corners (positions bounded by two walls) and those against walls with no goal access. These invalid positions are re-evaluated after placing each crate to insure that, for instance, two crates aren't placed adjacently against a wall.</p><p>Then they literally run a solving algorithm on it and see if it works. </p><p>You can see a demonstration of this algorithm, <a href=\"http://www.linusakesson.net/games/autosokoban/index.php\">called Autosokoban</a>.</p>",
        "Score": "15"
    },
    {
        "Id": "52",
        "Text": "<p>Some simple strategies I've found are:</p><ol><li>Look for zeroes.  Any time you have $X + Y = X$ in the ones column, you know that $Y = 0$.  </li><li>Look for doubles.  Any time you have numbers of the format $A + A = B$ in the ones column, you know that $B$ is even, and you know that either $0 < A < 5$ OR that there is a carrying one to the next column.</li><li>Look for carrying ones.  Any time the answer has more columns in the answer than in the problem, you know that the value in the \"extra\" column is a $1$.  (In the example problem given, you know that $M = 1$.)</li></ol><p>Tips 1 and 2 <em>can</em> work for columns other than the ones column, but make sure you consider the possibility of carrying.  Also, these strategies must be modified if there are more than two \"words\" being added together.</p><p>Edit to add: My answer only covers a very small subset of cases, and will not solve all scenarios.  <a href=\"https://puzzling.stackexchange.com/a/71/11\">Emrakul's answer</a> describes how to translate the alphametic problem into smaller algebraic equations, and gives a sample of how to start solving the problem.  <a href=\"https://puzzling.stackexchange.com/a/31429/11\">Reti43's answer</a> goes into more detail about how to find certain patterns in those algebraic equations that can help you solve it faster.  While both answers are a bit technical, they are both very good reads, and far more helpful than my answer.</p>",
        "Score": "13"
    },
    {
        "Id": "57",
        "Text": "<p>There's only one canonical example I can find of a crossword using question marks to mean anything special.</p><p>Many American crossword puzzles (for instance, the New York Times) rely on a convention that, if a clue ends in a question mark, it's a play on words.</p><blockquote><p>Mental Block?</p><p>RUBIKSCUBE</p></blockquote><p>It can also be used to indicate something only loosely related to the topic:</p><blockquote><p>Cause for a head slap?</p><p>BONER</p></blockquote><p>In essence, the clue shouldn't be taken too literally. The British use an exclamation mark for a similar purpose.</p>",
        "Score": "11"
    },
    {
        "Id": "60",
        "Text": "<p>This type of chess puzzle is known as a <a href=\"http://en.wikipedia.org/wiki/Mathematical_chess_problem#Domination_problems\" rel=\"noreferrer\">domination problem</a>, and as @Xynariz points out, only five queens are needed for the 8x8 board. It's also interesting to note that five queens are also sufficient for the 9x9, 10x10, and 11x11 boards, as shown by the following diagram taken from a Russian chess-puzzle book found <a href=\"http://golovolomka.hobby.ru/books/gik/04.shtml\" rel=\"noreferrer\">here</a>.</p><p><img src=\"https://i.stack.imgur.com/9sQqA.png\" alt=\"5 queens suffice\"></p>",
        "Score": "24"
    },
    {
        "Id": "61",
        "Text": "<p>There are many more configurations:  </p><ol><li>If you see a 1 and 3 next to each other on the edge, fill the wall of the 3 on the edge of the puzzle and blank the two sides of the 1 not connected to that.  </li><li>Just like a 2 on the corner forces the two edges one step away from it to be filled, you can often find 2's in the middle that do the same.  </li><li>It is very useful to identify what squares are inside the loop-they get divided from the outside ones by the path and often that can show you larger features of the path.</li></ol>",
        "Score": "1"
    },
    {
        "Id": "63",
        "Text": "<p>You can't speed it up by much. To get to the 2048 tile, you need 1024 2 tiles, 512 4 tiles or a combination, and that many moves is your basic minimum. There is no way to cross those limits. Because 4 shows up 1/4 times, it will take about 850 moves minimum to finish, regardless of skill or strategy.</p>",
        "Score": "0"
    },
    {
        "Id": "64",
        "Text": "<p><kbd>C</kbd><kbd>B</kbd><kbd>C</kbd><kbd>A</kbd><kbd>C</kbd><kbd>B</kbd><kbd>C</kbd>, trying the doors at each step.</p><hr /><p>There are 4 possible states of the bolts:</p><p><strong>1</strong>. All on one door. It is possible to get out.<br /><strong>2</strong>. Exactly one bolt is on one side.<br /><strong>3</strong>. Bolts {1, 2}, {2 ,3}, {3, 4} or {4, 1} are on one side.<br /><strong>4</strong>. Bolts {1, 3} or {2, 4} are on one side.</p><p>Initially we can be in states <strong>2</strong>, <strong>3</strong>, or <strong>4</strong>. These are the possible states after each step. (We first try both doors to make sure we aren't in state <strong>1</strong>.)</p><p><kbd>C</kbd>: <strong>2</strong> or <strong>3</strong></p><p><kbd>B</kbd>: <strong>2</strong> or <strong>4</strong></p><p><kbd>C</kbd>: <strong>2</strong></p><p><kbd>A</kbd>: <strong>3</strong> or <strong>4</strong></p><p><kbd>C</kbd>: <strong>3</strong></p><p><kbd>B</kbd>: <strong>4</strong></p><p><kbd>C</kbd>: <strong>1</strong> (We will definitely have escaped by now)</p><p>Here's the state transition matrix I used to calculate the answer:</p><div class=\"s-table-container\"><table class=\"s-table\"><thead><tr><th style=\"text-align: center;\"></th><th style=\"text-align: center;\">A</th><th style=\"text-align: center;\">B</th><th style=\"text-align: center;\">C</th></tr></thead><tbody><tr><td style=\"text-align: center;\">1</td><td style=\"text-align: center;\">2</td><td style=\"text-align: center;\">3</td><td style=\"text-align: center;\">4</td></tr><tr><td style=\"text-align: center;\">2</td><td style=\"text-align: center;\">1/3/4</td><td style=\"text-align: center;\">2</td><td style=\"text-align: center;\">2</td></tr><tr><td style=\"text-align: center;\">3</td><td style=\"text-align: center;\">2</td><td style=\"text-align: center;\">1/4</td><td style=\"text-align: center;\">3</td></tr><tr><td style=\"text-align: center;\">4</td><td style=\"text-align: center;\">2</td><td style=\"text-align: center;\">3</td><td style=\"text-align: center;\">1</td></tr></tbody></table></div>",
        "Score": "38"
    },
    {
        "Id": "66",
        "Text": "<p>The solution I read when I heard about this problem (which is most likely the same one in your solution booklet) goes like this:</p><hr><p>Before they begin, give each prisoner a fixed number from 1 to 100, and correlate this with their name.</p><p>Then, when it is a prisoner's turn to open the boxes, he will start with the box of his own number. If the box does not contain his name in it, he will recall the number of the prisoner whose name <em>is</em> in the box, and open that number's box. He then continues this cycle of recalling a number and opening that box until either he finds the box with his own name in it, or 50 boxes are opened.</p><p>This strategy essentially maps one prisoner to another unique prisoner, or a number from 1 to 100 to another unique number from 1 to 100.</p><p>This is known as a <em>permutation</em>, and one of the things that can be shown about permutations is that they all consist of <em>cycles</em>. This is because no two prisoners can have the same prisoner's name in \"their\" boxes, so eventually each prisoner <em>would</em> come across their name by following the procedure above.</p><p>Now, obviously, if there are no cycles of length 51 or longer, then the prisoners will go free. And if there is a cycle of length 51 or longer, then the prisoners will all die.</p><p>Then, we just need to find the probability that there <em>is</em> a cycle of 51 or longer.</p><p>To do this, note first that there can only be one cycle of length 51 or more in a permutation of 100 elements - if there were more than one, there'd have to be at least 102 elements, which is impossible!</p><p>Now, for a cycle of length exactly $n$, we select the elements that are going to be in the cycle, and the rest can be permuted whatever way they want. This results in $\\binom {100} {n}$ possible sets of $n$ to be chosen, times $\\frac {n!}{n}$ ways to permute the cycle in that set (because the cycle has $n$ states itself), times $(100-n)!$ ways to permute the rest of the elements. Conveniently, this equals exactly $\\frac{100!}{n}$, so the probability that there is a cycle of length exactly $n$ is just $\\frac 1n$.</p><p>Then, the probability that there is a cycle of length 51 or longer is just $$1/51 + 1/52 + 1/53 + ... + 1/100 \\approx 0.688172$$, so the probability of the opposite is $0.311828$ which is above 30%.</p>",
        "Score": "69"
    },
    {
        "Id": "69",
        "Text": "<p>I've tried to explain the solution using as little math as possible, and to give some intuition as to what makes it tick. Nonetheless there will be a little mathematical notation at the end.</p><h3>First steps: going beyond the obvious solution in the simplest case (N=2)</h3><p>The statement of the puzzle as presented here doesn't make this very clear, but the puzzle relies on the prisoners not knowing anything about which name is located in which box (until they get into the room, after which they cannot communicate anymore). If every prisoner checks 50 boxes at random, then each prisoner has a ½ chance of finding his own name. If all the prisoners choose a set of boxes at random, independently, then the probability that they all find their own name is ½ × … × ½ = 1/2<sup>100</sup> — infinitesimal.</p><p>Making independent choices is a waste, though. If anyone gets it wrong, the situation isn't worse than if everybody gets it wrong. Rather than make independent choices, they can make correlated choices; the idea is to try to arrange that either everybody gets it right, or many get it wrong.</p><p>Let's consider the simpler case when there are two prisoners. If they both choose at random, then they have ½ × ½ = ¼ chance of surviving. But there's an obvious waste: suppose prisoner #1 opens the left-hand box and finds his name: then prisoner #2 will not find his name in the left-hand box. So the prisoners can decide that #1 will look at the box on the left and #2 looks at the box on the right: that way, either they both get it right or both get it wrong, and they have a ½ chance of survival.</p><p>Incidentally, note that another assumption that wasn't clearly stated here is that the prisoners get to formulate their strategy in secret. If the warden knows which prisoner chose which box, he can arrange for the prisoners to fail by putting prisoner #1's name in the right-hand box.</p><h3>The next step: N=4</h3><p>The obvious way to generalize this to more prisoners is to assign each prisoner a fixed set of boxes that he'll open. However, I won't pursue this further, because it doesn't take advantage of an important ability: after a prisoner has opened a first box, he can base his decision on which box to open next on the content of the first box, and so on.</p><p>Consider the case with 4 prisoners and 4 boxes. I'll use numbers for the prisoners' names, and assume that the boxes are numbered as well. Intuitively, it is preferable for each prisoner to pick a different box to open first, since otherwise some common choices are wasted. So prisoner #1 opens box #1 and finds a name (number). Now what? If he finds his own name (#1) (¼ chance), of course, he can stop. If he finds some different name (say 2) (¾ chance), what information does this provide? Well, since each box contains a different name, prisoner #1 now knows that box #2 does not contain 2, so prisoner #2 will not be lucky the first time either. Furthermore, the strategy should favor arranging for prisoner #2 to pick box #1 next.</p><p>To simplify the analysis, I'll only look at cases where all prisoners follow the same strategy. (I don't have an intuitive argument as to why breaking the symmetry wouldn't be advantageous.) Either they all open the box whose number they found in the first box, or they all open a different box.</p><ul><li>If #1 opens box #2 and finds his name there, then either boxes #3 and #4 contain 3 and 4 respectively, or they contain 4 and 3. Either way, with the strategy of using the name in the first box, if one prisoner is lucky the second time then every prisoner is lucky!</li><li>If #1 opens box #3 instead and finds his name there, then there is a ½ chance that prisoner #2 will find his name in box #2, and a ½ chance that he'll find his name in box #4. But what about prisoner #3? He finds the name of prisoner #1 in box #3, which doesn't give any clue as to where 3 might be instead.</li></ul><p>So let's concentrate on the strategy where each prisoner opens the second box whose number is what he found in the first box. What arrangement of numbers in boxes make it work?</p><p>There are 4 ways to choose which box contains the number 1. The number 2 can go into any of the 3 remaining boxes. The number 3 can go in either of the 2 remaining boxes, and the number 4 must go into the one remaining box. So there are 4×3×2 = 24 different arrangements. The following arrangements lead to success because each number is either in its own box or swapped with another number:<br>1234 1243 1324 1432 2134 2143 3214 3412 4231 4321</p><p>That's 10 successful arrangements out of 24. The chance of success isn't very far from the theoretical maximum of ½, which is encouraging.</p><p>Note that in order for the chance of success to be 10/24, we need to know that the arrangements have an equal chance of being chosen. If the warden is nasty and arranges the numbers as 2341, the prisoners are sure to lose. This is where the fact that the prisoners choose a strategy in secret comes in. In my analysis, I used numbers for prisoners — but fact the prisoners are names, not numbers, and they can pick a random assignment of names to numbers as part of their secret strategy (in fact, this assignment is the only secret part, since the warden may have looked up the solution of the puzzle).</p><h3>General analysis</h3><p>Let's explore a strategy that generalizes what we explored for 4 boxes: each prisoner opens the box with his own number, then the box whose number is contained in the first box, and so on. Consider the sequence of numbers that a certain prisoner encounters: $x_0$ (the inital box numbered with the prisoner's own number), $x_1$ (number contained in box $x_0$), $x_2$ (number contained in box $x_1$), … Since each number is contained in only one box, this sequence cannot contain any repeated element as long as it doesn't loop back to $x_0$. Eventually the sequence has to loop back to $x_0$ since it will run out of numbers. At that point, the prisoner has found his own name. The critical problem for the prisoner is whether the loop completes before or after the prisoner has opened the maximum of 50 boxes.</p><p>From now on, let me use the proper mathematical vocabulary. A way to arrange distinct numbers into as many boxes is called a <a href=\"http://en.wikipedia.org/wiki/Permutation\"><em>permutation</em></a>. Opening box number $k$ and looking at the number that it contains is called <em>applying</em> that permutation. Repeated applications of a permutation eventually runs into a loop; such a loop is called a <a href=\"http://en.wikipedia.org/wiki/Cycle_(mathematics)\"><em>cycle</em></a>. The prisoners succeed if all of the cycles for the permutation have a length of at most 50.</p><p>Let's call a cycle <em>long</em> if it contains 51 or more elements. Observe that there cannot be more than one long cycle (if one cycle has at least 51 elements, then there are only 49 or fewer elements to share between the other cycles). So we can count the losing configurations by adding up the permutations of 100 elements that have a cycle of length 51, 52, …, 100.</p><p>Lemma: there are $n! = 1 \\cdot 2 \\cdot 3 \\cdot \\ldots \\cdot (n-1) \\cdot n$ distinct permutations of $n$ elements. Proof: there are $n$ ways to pick the image of the first element, $n-1$ remaining ways to pick the image of the second elements, etc., down to a single way to pick the image of the last element.</p><p>Now let's count the number of permutations that have a cycle of length $c$ (for $c \\ge 51$, so that there's a single such cycle). We're actually going to count each permutation $c$ times, once for each element of the cycle. Pick the first element in the cycle: there are 100 possibilities. There are 99 possibilities for the second element, and so on, until we've picked $c$ elements. So far, that's $100 \\times 99 \\times \\ldots \\times (100-c+1)$ possibilities. There are $100-c$ remaining elements, and they can be permuted in any way, so there are $(100-c)!$ possibilities as per the lemma above. That's a total of $(100 \\times 99 \\times \\ldots \\times (100-c+1)) \\times ((100-c) \\times \\ldots \\times 2 \\times 1)$ possibilities, which nicely collapses to $100!$. Recall that we counted each permutation $c$ times, since we counted it once per element in the cycle. So the number of permutations with a cycle of length $c$ is $100! / c$.</p><p>The number of permutations with a long cycle is thus$$ \\frac{100!}{100} + \\frac{100!}{99} + \\ldots + \\frac{100!}{51} $$That's out of a total of $100!$ permutation. The proportion of failing permutations is thus$$ \\frac{1}{100} + \\frac{1}{99} + \\ldots + \\frac{1}{51} $$Numerically, this is about 0.6882, i.e. the chance of success is about 31.18%, a little over the requisite 30%.</p><p>In general, the proportion of failing permutations for $N$ prisoners is $H_N - H_{N/2}$ where$$ H_n = 1 + \\frac{1}{2} + \\ldots + \\frac{1}{n} $$is called the $n$th <a href=\"http://en.wikipedia.org/wiki/Harmonic_number\">harmonic number</a>. For large values of $n$, $H_n \\approx \\ln n + C$ for some number C, and the series $H_N - H_{N/2}$ converges to $\\ln 2 \\approx 0.6931$ from below. (I will not provide an elementary proof of that). This gives a lower limit to the chance of success for large numbers of prisoners: 30.68% is achievable.</p>",
        "Score": "78"
    },
    {
        "Id": "71",
        "Text": "<p>The optimal way to solve this is to create linear equations of the problem.</p><p>I'll take the following problem:</p><pre><code>K Y O T OO S A K A + -----------T O K Y O</code></pre><p>What you need to do to solve this is to set up a sequence of linear equations that represent the carryovers and equations. I'll denote $x_n$ as the single-digit carryover, and $C_n$ as the double-digit carryover. $x_n$ must be either 0 or 1, and $C_n$ must be either $0$ or $10$. (I'm going to replace $O$ with $P$ for readability.)</p><p>What one ends up with is:</p><p>$\\begin{align}P+A&=P+C_1\\\\T+K&=Y+C_2-x_1\\\\P+A&=K+C_3-x_2\\\\Y+S&=P+C_4-x_3\\\\K+P&=T-x_4\\end{align}$</p><p>And an important property: $C_n=10*x_n$.</p><p>In essence, these equations represent the individual carryovers. Take the second column: $T + K = Y$, but if $Y$ has $1$ added from the carryover of $O + A$, then it needs to allow for that with $x_1$. Additionally, $10$ of the value of $T + K$ may have carried over into the next column, so one needs to add $C_2$. This is repeated for each column.</p><p>The next thing to do is set up a table of possible values, that looks something like:</p><pre><code>A : 0 1 2 3 4 5 6 7 8 9K : 0 1 2 3 4 5 6 7 8 9P : 0 1 2 3 4 5 6 7 8 9S : 0 1 2 3 4 5 6 7 8 9 T : 0 1 2 3 4 5 6 7 8 9Y : 0 1 2 3 4 5 6 7 8 9 </code></pre><p>Additionally, make note of the values of $C_1$ through $C_4$ and $x_1$ through $x_4$.</p><p>There are a couple conditions to take note of, which will further restrict what the values of $A, K, P, S, T,$ and $Y$ (and therefore $C_n$ and $x_n$) can be: Primarily, no single value can be greater than nine. </p><p>At this point, it turns into a reduction of linear equations. <strong>This method is guaranteed to quickly solve any puzzle.</strong> </p><hr><p>I'll go a couple steps into the problem here:</p><p>$P + A = P + C_1$, so $A = C_1$. We therefore know that $A = C_1 = x_1 = 0$, since $C_1$ is either $0$ or $10$. First problem solved! We update our table and equations (the first equation is now useless):</p><pre><code>T + K = Y + C_2P     = K + C_3 - x_2Y + S = P + C_4 - x_3K + P = T       - x_4A : 0K :   1 2 3 4 5 6 7 8 9P :   1 2 3 4 5 6 7 8 9S :   1 2 3 4 5 6 7 8 9 T :   1 2 3 4 5 6 7 8 9Y :   1 2 3 4 5 6 7 8 9 </code></pre><p>The rest is left as an exercise to the reader. It isn't an easy problem to solve, and takes some manual reduction. However, if you'd like to verify your solution:</p><blockquote class=\"spoiler\">  <p> $A=0, K=4, P/O=3, S=2, T=7, Y=1$; $C_2=10x_1=1$; all other $C_n = 0$ The final problem becomes $41373+32040=73413$</p></blockquote>",
        "Score": "14"
    },
    {
        "Id": "74",
        "Text": "<p>You must keep track of all numbers that you have tried in a square. Then, on the random number generation step, if all numbers have been tried, go <em>back</em> one square.</p><p>When going back, remember to clear the \"numbers already tried\" list; otherwise you can't get past that point. This won't lose any information, because sudoku generation is like branching out on a \"tree\" - you don't care what's past that branch as long as you know it's a dead end.</p><p>For this same reason, you must keep a \"points tried\" list on <em>all</em> squares, in case you have to go back two or more squares.</p>",
        "Score": "5"
    },
    {
        "Id": "76",
        "Text": "<p>Okay, I'll give a group-theoretic answer, since that was requested, which goes most of the way to a proof. I'm assuming you mean a 3x3x3 Rubik's cube. For larger cubes, the proof is just a little bit less convenient, because these cubes <a href=\"https://math.stackexchange.com/q/144424/8473\">don't form groups</a> (or more precisely, the action of the group of all moves on the cube on the states of the cube is not free). Basically everything still holds though for all cubes larger than 3x3x3 when talking specifically about the corner pieces, except that if the number of layers is even nothing fixes the orientation. Edge pieces and centers can get a bit more complicated though. Also, throughout, I'll use the notation $\\mathbb Z_n = \\mathbb Z / n \\mathbb Z$ for the cyclic group of order n.</p><p>There are a number of groups one could be referring to when using the term \"cube group\". Here, by the \"full cube group\" $G$, I mean the set of all states of the cube that can be reached by disassembling it and reassembling it, keeping all the center pieces fixed in position. In order to define the product, we'll identify it as a subset of the permutation group on the stickers. Note that each corner/edge sticker is distinguishable from all 47 other stickers. This is because on the 3x3x3 cube, each cubie has a unique collection of sticker colors. Hence, each state $\\Sigma$ corresponds uniquely to a permutation $\\sigma_\\Sigma \\in S_{48}$, where $\\sigma_\\Sigma(s_i)$ is the sticker in the position that sticker $s_i$ would be in the state $\\Sigma_0$ corresponding to the solved cube. The product structure on the full cube group is induced by this map. As a trivial consequence of this definition, the identity of the cube group is the solved cube position $\\Sigma_0$. (If this multiplication looks a bit backwards to you, it's because I want my permutation group to act on the right, which is primarily since the standard notation of cube moves (e.g. R U R' U R U2 representing the <a href=\"http://www.speedsolving.com/wiki/index.php/Sune\" rel=\"noreferrer\">Sune</a>) is read left-to-right.)</p><p>There are $8! \\; 3^8$ ways of putting in the 8 corner pieces (because each can be rotated any of 3 ways, and they can be permuted), and independently $12! \\; 2^{12}$ ways of putting in the 12 edge pieces. Hence, the full cube group has order $8! \\; 3^8 \\; 12! \\; 2^{12}$.</p><p>This group is too big for cubing purposes. When cubing, there are 6 basic moves you can make, specifically, U, D, L, R, F and B (as well as their inverses, which are typically denoted by primes e.g. U'). The cube group $H$ is the subgroup of the full cube group generated by these 6 permutations, i.e. which can be written as words in these 6 letters and their inverses. These represent the states of the cube which are reachable with a finite sequence of turns. On this subgroup, the product operation is especially easy to understand. Let $a_1 \\cdots a_n$ be any word in the generators which takes you from $\\Sigma_0$ to $\\Sigma_1$, and $b_1 \\cdots b_m$ any word taking you from $\\Sigma_0$ to $\\Sigma_2$. Their product $\\Sigma_1 \\Sigma_2$ is the state you reach from the sequence of moves $a_1 \\cdots a_n b_1 \\cdots b_m$. Now that we have this identification, I'll be a bit cavalier in equating moves with states, but it should always be clear in context what is meant.</p><p>We want to prove that a particular state $\\Sigma'$, that with a single corner turned by $120^\\circ$, is not reachable, which is to say that it is not in the cube group (though it is in the full cube group). To do this, we'll define a homomorphism $\\varphi: G \\rightarrow \\mathbb Z_3$. We'll then show that $\\varphi(a_i) = 0$ for any one of the 6 generators $a_i$. Since any state $\\Sigma$ in the cube group can be written as a word in the generators, that means that $\\varphi(\\Sigma) = 0$. That is to say that $\\varphi$ is an invariant under the cube group. However, we can compute $\\varphi(\\Sigma') \\ne 0$, which shows that $\\Sigma' \\not \\in H$. </p><hr><p><em>Aside</em>: I'll just point out that this sort of approach of defining invariants that are preserved under a set of transformations is very common in mathematics; for instance, point-set topology could be characterized broadly as the study of invariants of topological spaces under homeomorphisms. Here, we're dealing with an algebraic invariant. To be a bit fancier, we're trying to define a surjective homomorphism $\\varphi$ so that the composition $H \\hookrightarrow G \\overset{\\varphi}{\\twoheadrightarrow} \\mathbb Z_3$ is the trivial homomorphism. Keep in mind though that this isn't an exact sequence-I haven't required that the kernel of $\\varphi$ is exactly $H$. It isn't a chain complex either, at least not in standard parlance, since $H$ and $G$ are nonabelian groups.</p><hr><p>To define the invariant, label each of the corner cubie stickers in the solved state with a number 0, 1, or 2, according to this diagram of a net of the cube:</p><p><img src=\"https://i.stack.imgur.com/qiiQJl.png\" alt=\"enter image description here\"></p><p>Define $\\varphi(\\Sigma)$ to be the total number on the stickers on the up and down faces mod 3 in the state $\\Sigma$. This of course gives a (surjective) map from the full cube group to the group $\\mathbb Z/3\\mathbb Z$, which is not clearly a homomorphism. I won't give a full proof that it is, but I'll take you most of the way there.</p><p>You may wonder where this particular choice comes from. In fact, the only reason I chose it is because it makes it very easy to see that $\\varphi(a_i) = 0$ for each generator $a_i$. For the up and down moves, these don't even change any of the numbers at all. For the other 4 moves, the numbers do change, but they change the same way for all 4. Hence, you only need to check one position, and it's easy to check $\\varphi(F) = 0$. For the proof I give below, it's a bit more convenient to check that the inverses of the generators also preserve $\\varphi$, which only requires checking one more state $\\varphi(F')=0$.</p><p>This ambiguity of choice of edge-labels for the solved state turns out to be important for proving that $\\varphi$ is a homomorphism. Specifically, you'll want to prove the following lemma: Any choice of numbering will define the same function $\\varphi$ provided is satisfies two criteria:</p><ul><li>Each cubie contains each of the numbers 0, 1, 2, exactly once, and they are in that cyclic order when read counter-clockwise around the vertex.</li><li>The solved state still satisfies $\\varphi(\\Sigma_0)=0$ for this choice of numbering.</li></ul><p>This isn't too hard to prove, but I'll skip it here. Once you can prove that, the homomorphism property of $\\varphi$ comes basically for free. For simplicity, I'll just prove that the restriction $\\varphi |_H$ is a homomorphism (specifically the trivial homomorphism), which is all we need. The proof is by induction. The base case is the identity. Suppose we can show that for every word of length $n$ in the generators, $\\varphi(a_1 \\cdots a_n) = \\varphi(a_1) \\cdots \\varphi(a_n) = 0$. Consider an arbitrary word $a_1 \\cdots a_n a_{n+1}$. Now note that for $\\Sigma = a_1 \\cdots a_n$, we could define a different numbering on the cube, specifically, the one we would get by first doing $\\Sigma$, then numbering the cube as in the above figure (and then of course returning it to the initial solved state). By inductive hypothesis, $\\varphi(\\Sigma^{-1}) = \\varphi (a_n^{-1} \\cdots a_1^{-1}) = 0$. But $\\Sigma^{-1}$ has the same numbering in the original scheme as $\\Sigma_0$ in the new one, because to get to $\\Sigma_0$ from the above we just undo the moves we did before by applying $\\Sigma^{-1}$. Thus, this alternate numbering pattern fulfills both requirements of the lemma (the second one is clear), so it gives a different method to compute the same function $\\varphi$.</p><p>However, then the state $a_1 \\cdots a_n a_{n+1} = \\Sigma a_{n+1}$, by construction in the new edge-numbering, will have the same numbering as if you started with the original edge-numbering in the figure above and did the single turn $a_{n+1}$, which we know will still give $\\varphi(a_1 \\cdots a_{n+1}) = 0$. Hence, for any reachable state $\\Sigma \\in H$, we'll have $\\varphi(\\Sigma) = 0$, so $\\varphi |_{H} = 0$.</p><p>That's all you need, but I'll just say that proving that $\\varphi$ is a homomorphism on $G$ isn't too much harder. You have to choose a different generating set though, since the generators for the cube group don't generate the full cube group. The generators you want to choose are basically \"swap corners i and i+1\" and \"twist corner 1 by $120 ^\\circ$\". Those generate all possible configurations of the corner pieces (you should prove this). Of course, you also need to include things which generate the edge permutations, though these aren't important at all since we only care about the corners. The proof will proceed much the same as above, with a bit of special consideration taken for the \"twist corner 1\" generator.</p><p>Now, once you know $\\varphi(\\Sigma) = 0$ whenever $\\Sigma \\in H$, you just have to compute $\\varphi(\\Sigma')$ for the state with a single corner turned. This is easily seen to be either 1 or 2 depending on which direction you twist the single corner. So $\\Sigma' \\not \\in H$, and we're done with the proof. As you can see, it's not really that hard, though it is very detailed and long.</p><hr><p>I'll take a moment to mention some nice group theoretical stuff that we're actually not far off from proving. Note that as I said before, the sequence of homomorphisms $H \\hookrightarrow G \\twoheadrightarrow \\mathbb Z_3$ is not exact. However, we can basically completely understand the group structure of the cube group. It is a normal subgroup of the full cube group, and the quotient is given by $H \\hookrightarrow G \\twoheadrightarrow \\mathbb Z_3 \\times \\mathbb Z_2 \\times \\mathbb Z_2$ (which is exact). The latter factors of $\\mathbb Z_2$ are also describable simply in terms of cube positions. The first represents edge orientation; a state with a singe edge flipped is not solvable. The second represents odd permutations. A state with 2 corner pieces (or 2 edge pieces, but not both) swapped, but with all other pieces in the right position, is not solvable. It's impossible to permute a single pair of pieces, though it is possible to permute 2 pairs simultaneously. For any cube state, when solving it, you'll either eventually come to a fully solved cube, or you'll reach something which has a single corner twisted and/or a single edge flipped and/or a single pair of either corners or edges swapped. In any of these latter cases, the cube is not solvable and will need to be disassembled to return it to the solved state.</p><p>From the above, the cube group $H$ is an index 12 subgroup of the full cube group $G$, which means that 1/12 of the positions will be solvable. The cube group $H$ thus has order $8! \\; 3^7 \\; 12! \\; 2^{10}$. Furthermore, if you know a bit of group theory, it's pretty easy to see that the full cube group is isomorphic to $\\mathbb Z_3 \\wr S_8 \\times \\mathbb Z_2 \\wr S_{12}$. The edge and corner orientations are just the diagonal homomorphisms of their respective wreath products (which incidentally is the easiest way to prove the above lemma by showing that this gives you the same homomorphism), while the permutation parity is a bit more complicated to understand. Once you've understood these fully, you can compute that the cube group is isomorphic to $(\\mathbb Z_3^7 \\times \\mathbb Z_2^{11}) \\rtimes ((A_8 \\times A_{12}) \\rtimes \\mathbb Z_2)$. </p><p>Finally, since it's relevant to my interests, I'll briefly note that much of what I said here still works for higher dimensional cubes. See, for instance, <a href=\"https://mathoverflow.net/q/147172\">this MO question</a>.</p>",
        "Score": "39"
    },
    {
        "Id": "79",
        "Text": "<p>The answer quite honestly is: depends on how much you want to memorize. </p><p>I'd personally recommend exploring the algorithms and why they work before delving into speedcubing algorithms. The reason for this is simple: over the use of the cube, you'll see faster ways to do what you're trying to do. My solve time using the beginner's method is between 30 and 40 seconds (PB avg of 5 for me is about 24-6, if I recall?).</p><p>Also, do remember that a lot of it <em>does</em> actually have to do with how fast you move. Never underestimate the impact of training yourself to build up sheer speed in execution - but also never forget the benefits of muscle memory. </p><p>That being said, the ways to truly speed up your solves are with memorizations of specific steps. And to reiterate, this all depends on how much you intend to memorize. </p><p>The <a href=\"http://en.m.wikipedia.org/wiki/Fridrich_Method\">Fridrich Method</a> is widely regarded to be one of the fastest modern methods for solving the cube, though it is certainly not the fastest. In essence, it relies on the cross, then F2L, then OLL, then PLL, and takes a significant amount of memorization to execute in full. </p><ul><li>The Cross is what you're familiar with from the basic solve. </li><li>F2L stands for First Two Layers, and indicates a concurrent solve of both of the first two layers. This revolves, in essence, around pairing edges with corners and inserting both at once. There are a decent number of algorithms associated with specific conditions, all designed for the shortest path. </li><li>OLL stands for Orientation of the Last Layer, and is, in essence, a dictionary method that orients all the pieces on the last layer. <a href=\"http://www.cubewhiz.com/oll.php\">Lots of documentation is available</a>.</li><li>PLL stands for Permutation of the Last Layer, and is also effectively a dictionary attack on the permutation of pieces. This is <a href=\"http://www.cubewhiz.com/pll.php\">slightly less intensive than OLL</a>.</li></ul><p><strong>However, these are the extremes.</strong> I'm using these to illustrate a point that the more you memorize, the faster you'll get. You can find a list of methods <a href=\"http://www.speedsolving.com/wiki/index.php/3x3x3_speedsolving_methods\">on the speedcubing wiki</a>. There are a <em>lot</em> of intermediate steps, though, which can help you along your path. </p><ul><li>F2L doesn't necessarily need piles of algorithms. You can learn partial solutions, and intuitively guide yourself to cases you know. </li><li>You can split OLL into two steps: one to orient edges, and one for corners. </li><li>You can do the same for PLL. </li></ul><p>In essence, the more shortcuts you discover and memorize, the faster you'll go. I definitely recommend looking through the <a href=\"http://www.speedsolving.com/wiki/index.php/3x3x3_speedsolving_methods\">speedcubing methods</a> wiki page, as it contains further useful information. </p>",
        "Score": "10"
    },
    {
        "Id": "82",
        "Text": "<p>It's called <a href=\"http://en.wikipedia.org/wiki/Bridg-It#Gale\">Bridg-It</a>, or <a href=\"http://www.papg.com/show?1TPI\">Game of Gale</a> (as it was invented by David Gale). It is the rectangular grid equivalent of the <a href=\"http://en.wikipedia.org/wiki/Shannon_switching_game\">Shannon switching game</a>, which is a generalized version of <a href=\"http://en.wikipedia.org/wiki/Hex_%28board_game%29\">Hex</a>.</p>",
        "Score": "9"
    },
    {
        "Id": "84",
        "Text": "<p>There are a couple of further strategies. To start, there are a lot more local patterns that allow marking some loop segments and non-loop segments. Bram de Laat wrote up an excellent <a href=\"http://puzzleparasite.blogspot.de/2011/11/slitherlink-pattern-guide_23.html\">guide</a>.</p><p>Then, there are some global arguments, which hinge on the requirement for a single loop: Some edges may result in a small closed loop, or some edges must be part of the loop in order for the loop to reach some remote area of the grid.</p><p>If you bisect the grid along any path, the loop must cross the cut an even number of times. (This is basically the <a href=\"http://en.wikipedia.org/wiki/Jordan_curve_theorem\">Jordan Curve Theorem</a>.)</p><p>Another set of techniques that I don't want to detail here exploit the fact that the puzzle has a unique solution.</p>",
        "Score": "10"
    },
    {
        "Id": "85",
        "Text": "<p>To be able to judge the difficulty of a Sudoku, you first need to define \"difficulty\". The most useful definition seems to rely on the question:</p><blockquote>  <p>How long does it take an \"average\" solver to solve the puzzle?</p></blockquote><p>Making this precise will involve fixing the population of solvers, and setting up some reference. E.g., take the 10 best Sudoku solvers at the last World Sudoku Championships and say a puzzle is of \"medium\" difficulty if they take 3 minutes on average.</p><p>In practice, assembling a representative group of a few solvers and having them solve your puzzles will give a reliable view of their relative difficulty.</p><p>Regarding the technical difficulty definitions, note that it is possible to make reasonably tricky puzzles with basic techniques (hidden singles can be hard to spot, but a skilled author can make them obvious). Similarly, X-wings can be in plain sight or hidden. So judging difficulty by required techniques alone is not particularly helpful.</p>",
        "Score": "4"
    },
    {
        "Id": "87",
        "Text": "<p>To solve this puzzle you first have to know the boundaries in whose you are working. </p><p>There are 20 teams, a total of 190 matches (and 190 points).</p><p>You have to divide the 190 points to all teams. The points you have to distribute are 0, 1, 4, 9 and 16 since a team can't get more than 19 points.</p><p>So first we go to the team with 0 points. This can only be one because all the other teams have at least 1 win against this team. The second team then has 1 point. Again all other teams now have at least 2 points so the next few teams can have at least 4 points. If we follow this in the end I got 4 teams with 4, 5 teams with 9, 6 teams with 16 2 with 10 and 1 with 12. To fix those few teams with an non square number, we either have to get them to 16 or to 9. when we get them all to 9 we can get a 4 to 9 too (5 points in total). </p><p>So the result then is the following:</p><blockquote class=\"spoiler\">  <p> 1 team with 0 points<br> 1 team with 1 points<br> 3 team with 4 points<br> 9 team with 9 points<br> 6 team with 16 points  </p></blockquote><p>This is the way I can solve this puzzle, maybe there is a mathematical way I don't know of. </p>",
        "Score": "3"
    },
    {
        "Id": "90",
        "Text": "<p>I know this type of puzzle simply as a \"Logic Puzzle\" or sometimes \"Logic Grid Puzzle\" (see <a href=\"http://en.wikipedia.org/wiki/Logic_puzzle\" rel=\"noreferrer\">Wikipedia entry here</a>).</p><p>It's impossible to come to a fixed number, because each clue may reveal a different amount of information. For example \"The Englishman lives in the red house but doesn't own a dog\" essentially has two clues.</p><p>Even if you break those down into separate pieces of information, there are different <em>types</em> of information:</p><ul><li><strong>Straight truths</strong>, e.g. \"The Englishman lives in the red house\". This is more than one piece of information, since you also exclude multiple possibilities (i.e. No one else lives in the red house).</li><li><strong>Negatives</strong>, e.g. \"The Swede doesn't live in the green house\". Here you only gain one piece of information.</li><li><strong>Spatial or relative clues</strong>, e.g. \"The Dane's house is somewhere to the right of the Norwegian's\". These can get more complex depending on the specific puzzle (e.g. \"Adam arrived at least 10 minutes later than Betty\"). It's impossible to determine how much information you extract from a clue here.</li></ul><p>However, I do believe there is one metric that is required to ensure a puzzle is solvable: <em>all but one of each 'entity' must be mentioned in the puzzle</em>. In other words, if you have 5 house colors then the clues must make reference to 4 of them (presuming all the colors are listed in the introduction or accompanying logic grid). If two colors are not mentioned, there is no way to determine what goes with each.</p>",
        "Score": "12"
    },
    {
        "Id": "93",
        "Text": "<p>If you have just items to transport, infinity. But it's no riddle, then. </p><p>But in 'classical' problem, every item except 1 is endangered by another item, every item except 1 is threatened by another item. </p><p>Under that circumstances you can't even solve it with 4, because no matter what item you take, there will be at least one 'colission' pair:</p><blockquote>  <p>A -> B -> C -> D</p></blockquote><p>It's unsolvable even if there's no threat from B to C, because you can 'break' only 1 danger pair, unless they have similar element (which can take place only by 3 items, because, in case of 4 and more 1 element would have to be neutral:</p><blockquote>  <p>A->B->C, D</p></blockquote><p>So without neutral elements, it's not solvable under that model.</p><p>If we take, that an element can be a danger for many, it's not going better:</p><blockquote>  <p>A->B, A->C </p></blockquote><p>this is solvable (removing A, than taking B and exchanging it for A, than taking C), but with any element more, it's unsolvable. Because you can either have A in boat, or have maximal 2 elements safe from A (one that you moved to the island in one step, the second in your boat). </p><p>So with 'simple' threatening rules (A can't be with B) it's solvable only for 3.</p>",
        "Score": "10"
    },
    {
        "Id": "94",
        "Text": "<p>For another viewpoint, let's take the \"classic\" version, of <code>A -> B, B -> C</code> (that is, fox eats goose, goose eats beans) and add a <code>D</code> such that it neither threatens anything nor is threatened by anything (a rock, say), as in the \"neutral\" element of @Lukasz's answer. Now is it solvable? Well, let's see (<code>\\/</code> = boat):</p><pre><code>  ABCD\\/~~~~~~~~~~  A CD  ~~~~~~~~~~\\/ B* A CD\\/~~~~~~~~~~   B* A C   ~~~~~~~~~~\\/ B D  A C \\/~~~~~~~~~~   B D  A     ~~~~~~~~~~\\/ BCD  AB  \\/~~~~~~~~~~    CD   B    ~~~~~~~~~~\\/A CD   B  \\/~~~~~~~~~~  A CD        ~~~~~~~~~~\\/ABCD</code></pre><p>As you can see, yes, it is solvable with two extra steps (marked with an <code>*</code>). Similarly, by adding more \"neutral\" elements and adding more extra steps, there is no limit on how many items you can have.</p><p>Note that there can only be two \"predators\" (objects that threaten other objects) because you can break a chain of two by removing one, but you can't break a chain of three by removing one:</p><pre><code>A -> B -> C -> D            A -> B                            C -> D             !      (or)A         C -> D            A  !                            C -> D   </code></pre><p>This is not true if they have the same \"prey,\" since removing that prey breaks all chains. Note that, however, you can't have <em>three</em> predators for one prey, because you can only carry one item, and there will have to be an intermediate step with one of those predators with the prey (try it!).</p>",
        "Score": "7"
    },
    {
        "Id": "95",
        "Text": "<p>We can simplify 2048 by discarding the layout and focusing on a multiset (or bag) of tiles. We can do this, if we assume that a new tile will always appear in a position that is most advantageous to us.<br>We can then define two rules to make a new bag out of the current one (we also ignore the possibility of getting 4s for simplicity's sake):</p><ol><li>Combine one or more pairs of tiles of equal value into tiles of double that value.</li><li>Add a 2-tile if there's an empty slot.</li></ol><p>Rule 1 is optional, rule 2 is mandatory. If rule 2 fails, we stop.</p><p>With this, we can see that for a bag of maximum size 3, we have the following states:</p><pre><code>{} → {2} → {2,2} → {2,2,2}             ↓        ↓           {2,4} → {2,2,4}                      ↓                   {2,4,4}                      ↓                   {2,2,8}                      ↓                   {2,4,8}</code></pre><p>For a bag of maximum size 4, we build from this:</p><pre><code>{} → {2} → {2,2} → {2,2,2} → {2,2,2,2}             ↓        ↓          ↓           {2,4} → {2,2,4} → {2,2,2,4}                      ↓          ↓                   {2,4,4} → {2,2,4,4}                      ↓          ↓    ↘                   {2,2,8} → {2,2,2,8}  {2,4,4,4}                      ↓          ↓    ↙                   {2,4,8} → {2,2,4,8}                                 ↓                             {2,2,8,8}                                 ↓     ↘                             {2,2,2,16}  {2,4,8,8}                                 ↓     ↙                  {2,4,16} → {2,2,4,16}                                 ↓                             {2,4,4,16}                                 ↓                             {2,2,8,16}                                 ↓                             {2,4,8,16}</code></pre><p>To allow for more than one pair of tiles combining, imagine a couple of diagonal arrows from <code>{2,2,2,2}</code> to <code>{2,4,4}</code>, from <code>{2,2,4,4}</code> to <code>{2,4,8}</code>, and from <code>{2,2,8,8}</code> to <code>{2,4,16}</code>.<sup>†</sup></p><p>From this, we can infer that for a table of size $n$, the maximum value attainable is $2^n$. For a standard 2048 game, <em>assuming only 2-tiles appear</em>, this means the maximum tile value is <strong>65536</strong>.If we allow 4-tiles, 131072.</p><p><sup>†: Drawing those arrows isn't easy and would've made for a less clear diagram.  </sup></p>",
        "Score": "3"
    },
    {
        "Id": "96",
        "Text": "<p><a href=\"http://dilbert.com/strip/2001-10-25\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/P7xj1.gif\" alt=\"\"></a></p><p>Each set of moves is designed to correct a parity error in the cube's layout, but each group of parity it corrects is essentially independent and random. Each step has a chance of already having the right parity. For instance, the way I do it is solve the bottom two layers and then attack the parity errors on the top one at a time</p><ul><li>Make sure all the edges are right-side-up<ul><li>3 possibilities </li></ul></li><li>Make sure the corners are in the right order<ul><li>3 possibilities</li></ul></li><li>Make sure the corners are right-side-up<ul><li>Not exactly sure. 5?</li></ul></li><li>Make sure the edges are in the right order.<ul><li>Not quite sure either. 5?</li></ul></li><li>on a 4x4 there can be a flipped edge<ul><li>2 possibilities</li></ul></li><li>on a 5x5 there are a couple other funny edge things<ul><li>5?</li></ul></li></ul><p>Now, the probabilities probably aren't equal for each parity state, but at each step there is a fair chance at already being in the right state. That's just how randomness works.</p><p>I'd say if you need most of the steps most of the time, you're doing fine. After all, when you practice you are really just training yourself to recognize and correct the errors. As long as you're encountering all of them once in a while, that's all that really matters.</p>",
        "Score": "16"
    },
    {
        "Id": "97",
        "Text": "<p>A good, scrambled Rubik's cube, in my opinion, has no lines of 3 of the same color on one side (green). It also has none of the same colors on a touching center and corner piece (red).</p><p><img src=\"https://i.stack.imgur.com/HnLg5.jpg\" alt=\"enter image description here\"></p>",
        "Score": "3"
    },
    {
        "Id": "98",
        "Text": "<p>I would say that riddle difficulty is hard to rate. Some people will find one riddle easy, while another person will find it hard. It all depends how you approach the solution. Some riddles involve little-known facts, and therefore are difficult to solve.</p>",
        "Score": "3"
    },
    {
        "Id": "102",
        "Text": "<p>For small puzzles of this type, a grid is very useful.  If there are three types of item, with five of each type, you can use a grid like this.  Put an x in all the squares you know cannot hold, and fill the boxes you know are true.  So if you are told 1 is not a, you x the upper left box.  If you are told B is 2 you fill the corresponding box, then x all the boxes in the same row and column.  You can also copy x's from one grid to another when you fill a box.  For four types, put types 1,2,3 across the top, 4,3,2 down the left and you will have six grids.  It becomes unwieldy after five types<img src=\"https://i.stack.imgur.com/Sg0fp.jpg\" alt=\"like this\"> This is especially useful to see when you have eliminated all but one possibility.  To capture the left/right information, one of your types of item can be the house number.</p>",
        "Score": "4"
    },
    {
        "Id": "104",
        "Text": "<p>For a standard <span class=\"math-container\">$9 \\times 9$</span> sudoku, the minimum is <span class=\"math-container\">$17$</span> squares.  It had long been known that at least <span class=\"math-container\">$16$</span> were required and that <span class=\"math-container\">$17$</span> was sufficient.  <a href=\"https://www.technologyreview.com/2012/01/06/188520/mathematicians-solve-minimum-sudoku-problem/\" rel=\"nofollow noreferrer\">This article</a> closes the gap.</p>",
        "Score": "19"
    },
    {
        "Id": "106",
        "Text": "<p>I think the problem with trying to rate these with one number is that <em>most</em> of the most popular brainteasers present challenges on up to three different \"challenge spectrums\":</p><ul><li><p><strong>Some are highly dependent on actual skills, knowledge or tools,</strong> like ones that can't easily be solved without a spreadsheet, or that are incredibly hard without knowledge of mathematical techniques like probability (trees, permutation odds, etc.) Monty Hall is one example that is <em>much</em> harder to solve -even if you can get past how unintuitive the answer is -if you've never studied at least basic probability techniques.</p></li><li><p><strong>Some require complex reasoning or creative (but not \"sneaky\") thinking.</strong> Complex reasoning (including some experimentation with different approaches) would include puzzles like <a href=\"https://puzzling.stackexchange.com/questions/16/100-prisoners-names-in-boxes\">100 boxes</a>. the I'd toss out \"Everyone may have children until they have a boy, and then must stop - what will the eventual boy/girl ratio be?\" as an example of creative thinking - it's not a \"trick,\" but you have to approach it in a highly non-intuitive way.</p></li><li><p><strong>Some require lateral thinking, of the variety that can seem kind of like a trick.</strong> I've seen this referred to as the \"Aha!\" characteristic of a puzzle.  Classic examples end with \"The doctor is his <em>mother</em> (you sexist!) or \"The victim is a fish!!\"</p></li></ul>",
        "Score": "7"
    },
    {
        "Id": "107",
        "Text": "<p>For 7 and 3 wanting 4, just fill the 7 and fill the 3 from it, leaving 4.  </p><p>Say you had 7 and 3 and want 2.<br>Fill the 7<br>fill the 3 from the 7, leaving 4<br>empty the 3<br>fill the 3 from the 7, leaving 1<br>empty the 3<br>put the 1 in the 3<br>fill the 7<br>fill the 3 from the 7, leaving 5<br>empty the 3<br>fill the 3 from the 7, leaving 2  </p><p>Basically you need the desired quantity to be less than the large jug and to have the desired quantity to be a multiple of the least common multiple of the jug volumes.  The algorithm is simple:  fill the large jug, keep filling the small jug from it, refill the large jug when you must, and you will get there.  You are finding a solution to <a href=\"http://en.wikipedia.org/wiki/B%C3%A9zout%27s_identity\" rel=\"nofollow\">Bézout's identity</a>  My solution is 2*7-4*3=2  The solution in the comments is 3*3-1*7=2  Note that if you subtract these two equations you get 3*7-7*3=0</p>",
        "Score": "2"
    },
    {
        "Id": "108",
        "Text": "<p>Within a group of $n$ teams, there are $\\frac{n (n - 1)}{2}$ points to share. But that goes for each subgroup as well. A subgroup of m teams, where $m < n$, will have $\\frac{m (m - 1)}{2}$ points between them, plus (at most) $m (n - m)$ points from the teams outside the subgroup. If we want to give this group the same number of points ($x$), that total is equal to $m \\cdot x$. So $$\\begin{align}m \\cdot x & \\le m \\cdot \\frac{m - 1}{2} +  m \\cdot (n - m) \\\\x & \\le \\frac{m - 1}{2} + (n - m) \\\\x & \\le n - \\frac{m - 1}{2}\\end{align}$$<br>Plugging in the numbers, we get that we can have <em>at the most</em> 7 teams with 16 points. That leaves us with 13 teams and 78 points between them. </p><p>Applying the same principle again and again, we end up with</p><blockquote class=\"spoiler\">  <p> 7 teams scored 16 points<br> 7 teams scored  9 points<br> 3 teams scored  4 points<br> 3 teams scored  1 point<br> 1 team  scored  0 points  </p></blockquote>",
        "Score": "2"
    },
    {
        "Id": "109",
        "Text": "<p>for 2 jugs that can contain $x$ and $y$ you can get any multiple of $GCD(x,y)$ between $0$ and $max(x,y)$ using the algorithm that @Ross described.</p><p>You can understand this by creating a new unit so that $1 \\text{ unit} = GCD(x,y)$ gallons, and now you have 2 jugs with $\\frac x {GCD(x,y)} = x'$ and $\\frac y{GCD(x,y)} = y'$ and because you can't take out fractional units it means that you alway have a multiple of $GCD(x,y)$ in your jugs.</p>",
        "Score": "1"
    },
    {
        "Id": "111",
        "Text": "<p>When playing <a href=\"http://jmfork.github.io/2048/\" rel=\"noreferrer\">deterministic 2048</a>, where a new tile is placed in the first available spot, you can get a pattern like this using left-down-left-down:</p><p><img src=\"https://i.stack.imgur.com/4FsNh.png\" alt=\"det 2048\"></p><p>The worst I have been able to get in regular 2048 is this:</p><p><img src=\"https://i.stack.imgur.com/miKCM.png\" alt=\"reg 2048\"></p><p>It <em>is</em> possible to get that worst-case scenario if your tile generator and human are working together to do so.</p>",
        "Score": "7"
    },
    {
        "Id": "114",
        "Text": "<p>The immediate answer is no. Any valid Sudoku can be solved without guessing, just by exhaustively trying all possibilities.</p><p>However, there are two interesting variant interpretations of the question:</p><p><strong>Are there Sudoku puzzles that can't be solved logically?</strong></p><p>This one depends on what you accept as a \"logical solution.\" In the strictest sense, the answer is again <em>no.</em> However, if you define a \"logical solution\" as excluding brute-force solving, the answer is probably \"yes.\" There is some imprecise agreement on what constitutes a logical solution under this definition in the puzzling community, but based on this, we will again find that yes, there are definitely Sudoku puzzles that have no logical solution.</p><p>Thomas Snyder has given an insightful <a href=\"http://www.gmpuzzles.com/blog/2013/03/ask-dr-sudoku-12-the-line-must-be-drawn-here/\">definition</a> of when a puzzle is solvable logically:</p><blockquote>  <p>When I can solve a puzzle in ink, without erasures, with all deductions either positive or negative coming from visualization in my head and not making scratch-work on the paper, the puzzle is solvable by logic.</p></blockquote><p><strong>Are there Sudoku puzzles that are faster to solve by guessing?</strong></p><p>Again, the answer is \"yes.\" In a competitive setting, most solvers would not use the more obscure techniques. After having narrowed possibilities somewhat with realistic techniques, some puzzles \"require\" guessing so as to not put the solver at a competitive disadvantage.</p>",
        "Score": "39"
    },
    {
        "Id": "118",
        "Text": "<p>Before you proceed, here's the riddle I came up with, through composing this answer. Obviously, the answer = spoiler follows close behind, so if you want to try to guess it, do it before proceeding below the line.</p><blockquote><p><em>Eight hours of death. Beneath your head -</em>.<br><em>a colored box that's full of dreams.</em><br><em>It listens to your tales unsaid.</em><br><em>Soft gifts of birds escape its seams.</em><br></p></blockquote><hr /><p><strong>Start from the end: the answer.</strong> Think about your target audience - if it's a kids' riddle you won't give them a riddle with 'Euler's Constant' for an answer. Make sure it's not too obscure, unless you're aiming at a very specific audience.</p><p>Let us try something nice and simple. Oh, out of top of my head, since I'm feeling sleepy, <em>a pillow</em>.</p><p><strong>Pick a set of associations</strong> which can describe the subject, themes realated to it.</p><ul><li>feathers/down</li><li>sleep</li><li>soft</li><li>cloth</li><li>bed</li><li>under head</li><li>square</li><li>pillowcase</li><li>dreams</li><li>container [contains feathers]</li></ul><p><strong>Turn some or that into either metaphors or unclear synonyms.</strong> Think of ways of bundling some of them, possibly unrelated. Try to have the metaphors related.</p><p>If you have difficulty coming up with metaphors, see <a href=\"https://writers.stackexchange.com/a/7140/4291\">my crude recipe from Writers.SE</a> although it's always better to craft these by hand.</p><p>Craft roughly half the required number of them for now. I'm aiming for a four-liner, so two will do.</p><p>square + container + dreams = <em>a box of dreams</em></p><p>feathers - fluffy; taken from birds - <em>fluffy gift of birds</em></p><p>Now is a good moment to <strong>start looking for rhymes.</strong> Professional poets will wince, but I cheat with rhyming dictionaries. <a href=\"http://www.rhymezone.com/\" rel=\"noreferrer\">RhymeZone</a> has fewer hits but of higher quality. <a href=\"http://www.rhymer.com/\" rel=\"noreferrer\">Rhymer</a> finds much more but some of them are quite poor.</p><p>Dreams:</p><blockquote><p>1 syllable:</p><p>beams, beam's, creams, deems, eames, gleams, hiems, nemes, reames, reams, reims, schemes, screams, seams, seems, siems, steams, streams, teams, team's, teams', teems, themes, weems</p><p>2 syllables:</p><p>basim's, esteem's, extremes, hakeem's, hakim's, kareem's, pezim's, racemes, redeems, regimes, regime's, supremes</p><p>3 syllables:</p><p>joachims, joachim's</p></blockquote><p>Let's look for something promising. Oh, a pillow has <em>seams</em>. Now, what can we write about seams? Sometimes the fall apart, sometimes feathers come out through these. We already have a line about feathers, so let's consume that one. Synonyms, extra adjectives, to <strong>pad for rhythm</strong>, and we have two first very nice lines.</p><blockquote><p><em>Colorful box that's full of dreams</em><br><em>Soft gifts of birds escape its seams.</em></p></blockquote><p>Now, since we consumed the 'gifts of birds' we need to resupply our store of metaphors to fit to half of the remaining lines. So, one. Similar noun, difference between them and the metaphor is ready.</p><p>Sleep - death - 8 hours. \"Eight hours of death.\" Tell me if that's not a nice metaphor.</p><p>Another visit to rhymezone and... nothing promising. \"Breath-death\" is totally ridden into ground. Let's pad with something at the end instead. Straight from the list above, 'head'.</p><blockquote><p>\"Eight hours of death under your head\".</p><p>1 syllable:</p><p>bled, bread, bred, dread, dred, dredd, ed, fled, fread, fred, freda, pled, schwed, sffed, shred, sled, sledd, sped, spread, stead, swed, szwed, thread, tread</p><p>2 syllables:</p><p>abed, behead, embed, imbed, instead, misled, misread, numed, purebred, retread, sayed, unread, unsaid, unted, unwed, widespread</p></blockquote><p>We have one cheap lockpick: 'instead', there's half the universe you can write ending with 'instead'. But let's pick something more ambitious. 'unsaid' has a nice poetic ring, and we should be able to come up with something neat and moody, since we have quite enough actual hints made.</p><blockquote><p>Listens to your confessions unsaid.</p></blockquote><p>Nice, but we're one syllable too long. Another modern poet's friend comes in handy: <a href=\"http://thesaurus.com\" rel=\"noreferrer\">Thesaurus.com</a>. The wrong rhythm is after the caesura, and we don't want to touch the rhyming word for now, so 'confessions' gets the axe.</p><p>Who'd think, <a href=\"http://thesaurus.com/browse/confessions\" rel=\"noreferrer\">lots of results</a> but only three 2-syllable synonyms. Still, 'stories' will be acceptable. Let's go with it.</p><blockquote><p>Listens to your stories unsaid.</p></blockquote><p>We can <strong>reshuffle some lines</strong> - you're rarely at such liberty with other poems, and the new arrangement both gives a nicer rhyme scheme, and composes second and third verse into one sentence:</p><blockquote><p><em>Eight hours of death under your head</em>.<br><em>Colorful box that's full of dreams</em><br><em>Listens to your stories unsaid.</em><br><em>Soft gifts of birds escape its seams.</em><br></p></blockquote><p>There.</p><p>edit:</p><p>...and then you show it to someone and they suggest some nice corrections. Thanks, Joe Z.</p><blockquote><p><em>Eight hours of death. Beneath your head -</em>.<br><em>a colored box that's full of dreams.</em><br><em>It listens to your tales unsaid.</em><br><em>Soft gifts of birds escape its seams.</em><br></p></blockquote>",
        "Score": "24"
    },
    {
        "Id": "119",
        "Text": "<p>The best solution I've found has 7 locks.</p><p>The Grand Vizier has keys 1, 2, 3, 4, 5, 6.</p><p>Slave 1 has keys 1, 2, 3, 7.</p><p>Slave 2 has keys 1, 4, 5, 7.</p><p>Slave 3 has keys 2, 4, 6, 7.</p><p>Slave 4 has keys 3, 5, 6, 7.</p><hr><p>A couple of things simplify the deduction of this puzzle:</p><ul><li><p>If the Grand Vizier has every key but one, and every slave has the missing key, that reduces the problem to 4 slaves and one less lock.</p></li><li><p>Every key must be held by at least two slaves.</p></li></ul><p>The rest I just brute forced with a (digital) pencil and paper.</p>",
        "Score": "15"
    },
    {
        "Id": "121",
        "Text": "<p>I think Kendall Frey's solution is the best you can do.</p><p>The original CBC is needed to make sure you started in state 2 (and are still there).<br>Then, after the A, you know you are in state 3 or 4 and don't need A again.  </p><p>If you do the A earlier, it:<br>- <code>25% chance</code> Solves state 2<br>- <code>75% chance</code> Puts you in state 3 or 4</p><p>Unfortunately, you didn't know you were in state 2, so it could take you from 3 or 4 to 2 instead.</p>",
        "Score": "2"
    },
    {
        "Id": "124",
        "Text": "<blockquote>  <p>Every normal magic square of order three is obtained from the Lo Shu by rotation or reflection.</p></blockquote><p>From Wikipedia: <a href=\"http://en.wikipedia.org/wiki/Lo_Shu_Square\">Lo Shu Square</a></p><p>Since rotation and reflection cannot move the 8 out of a corner, such a square is <strong>impossible</strong>.</p>",
        "Score": "17"
    },
    {
        "Id": "125",
        "Text": "<p>The canonical Einstein's Puzzle can be solved using a grid of possibilities, and the easiest way to do so is to track each of the possible states.</p><p>Each letter in this grid stands for the associated entity:</p><ul><li>Nationality stands for Enlgishman, Swede, Dane, Norwegian, and German</li><li>Colors (house color) stand for Blue, Green, Red, White, Yellow </li><li>Animals stand for Bird, Cat, Dog, Fish, Horse</li><li>Drinks stand for Bier, Coffee, Milk, Tea, Water</li><li>Cigarette stands for Blend, Blue Master (M), Dunhill, Pall Mall, Prince (R)</li></ul><p>We therefore have:</p><pre><code>Natl. | ESDNG | ESDNG | ESDNG | ESDNG | ESDNG |Color | BGRWY | BGRWY | BGRWY | BGRWY | BGRWY |Animl | BCDFH | BCDFH | BCDFH | BCDFH | BCDFH |Drink | BCMTW | BCMTW | BCMTW | BCMTW | BCMTW |Cigar | BMDPR | BMDPR | BMDPR | BMDPR | BMDPR |</code></pre><p>Thus, the clues help you immediately reduce the possibilities in this grid. I'll go through a couple steps to exemplify. I've pulled the rules from <a href=\"http://www.stanford.edu/~laurik/fsmbook/examples/Einstein%27sPuzzle.html\">Stanford's page</a>, and they look correct from memory.</p><hr><blockquote>  <p>(4) The green house is just to the left of the white one.</p></blockquote><p>Therefore, because the green house must be to the left of a house, and the white house must be to the right of a house, we know that the green house cannot be on the right, and the white house cannot be on the left.</p><pre><code>Natl. | ESDNG | ESDNG | ESDNG | ESDNG | ESDNG |Color | BGR Y | BGRWY | BGRWY | BGRWY | B RWY |Animl | BCDFH | BCDFH | BCDFH | BCDFH | BCDFH |Drink | BCMTW | BCMTW | BCMTW | BCMTW | BCMTW |Cigar | BMDPR | BMDPR | BMDPR | BMDPR | BMDPR |</code></pre><hr><blockquote>  <p>(5) The owner of the green house drinks coffee.</p></blockquote><p>We know that, since the fifth house cannot be green, its owner cannot drink coffee.</p><pre><code>Natl. | ESDNG | ESDNG | ESDNG | ESDNG | ESDNG |Color | BGR Y | BGRWY | BGRWY | BGRWY | B RWY |Animl | BCDFH | BCDFH | BCDFH | BCDFH | BCDFH |Drink | BCMTW | BCMTW | BCMTW | BCMTW | B MTW |Cigar | BMDPR | BMDPR | BMDPR | BMDPR | BMDPR |</code></pre><hr><blockquote>  <p>(8) The man in the center house drinks milk.</p></blockquote><p>This one should be obvious.</p><pre><code>Natl. | ESDNG | ESDNG | ESDNG | ESDNG | ESDNG |Color | BGR Y | BGRWY | BGRWY | BGRWY | B RWY |Animl | BCDFH | BCDFH | BCDFH | BCDFH | BCDFH |Drink | BC TW | BC TW |   M   | BC TW | B  TW |Cigar | BMDPR | BMDPR | BMDPR | BMDPR | BMDPR |</code></pre><hr><blockquote>  <p>(9) The Norwegian lives in the first house.</p></blockquote><p>Once again, this is obvious.</p><pre><code>Natl. |    N  | ESD G | ESD G | ESD G | ESD G |Color | BGR Y | BGRWY | BGRWY | BGRWY | B RWY |Animl | BCDFH | BCDFH | BCDFH | BCDFH | BCDFH |Drink | BC TW | BC TW |   M   | BC TW | B  TW |Cigar | BMDPR | BMDPR | BMDPR | BMDPR | BMDPR |</code></pre><hr><blockquote>  <p>(14) The Norwegian lives next to the blue house.</p></blockquote><p>Since the Norwegian lives in house 1, we know that the blue house must be house 2, because that is the only house the Norwegian is next to.</p><pre><code>Natl. |    N  | ESD G | ESD G | ESD G | ESD G |Color |  GR Y | B     |  GRWY |  GRWY |   RWY |Animl | BCDFH | BCDFH | BCDFH | BCDFH | BCDFH |Drink | BC TW | BC TW |   M   | BC TW | B  TW |Cigar | BMDPR | BMDPR | BMDPR | BMDPR | BMDPR |</code></pre><hr><p><strong>It should be immediately obvious why this strategy works.</strong> You can both reduce clues away as well as insert solutions into this grid, which is vitally important. Without tracking where pieces <em>can't</em> be, you lose a significant amount of vital information.</p>",
        "Score": "15"
    },
    {
        "Id": "126",
        "Text": "<p>Here's an intuitive explanation: let's set the squares to the things we know:</p><pre><code>? 8 ?? 5 ?? ? ?</code></pre><p>We can figure out the bottom one now, since <code>15-8-5=2</code>:</p><pre><code>? 8 ?? 5 ?? 2 ?</code></pre><p>The other two numbers on the bottom row now must add up to 13, which can only be 9/4 or 7/6. Now let's split this up into those two cases.</p><h2>Case 1 (9/4)</h2><pre><code>? 8 ?? 5 ?9 2 4</code></pre><p>Note that the top right square has to be 1, and the top left 6 (using the diagonals).</p><pre><code>6 8 1? 5 ?9 2 4</code></pre><p>Now let's use the columns to fill in the rest:</p><pre><code>6 8 11 5 109 2 4</code></pre><p>... notice a problem?</p><h2>Case 2 (7/6)</h2><pre><code>? 8 ?? 5 ?7 2 6</code></pre><p>Fill in the corners as before:</p><pre><code>4 8 3? 5 ?7 2 6</code></pre><p>And the edges:</p><pre><code>4 8 34 5 67 2 6</code></pre><p>This one doesn't work either. So, we've proved that this is impossible!</p>",
        "Score": "8"
    },
    {
        "Id": "127",
        "Text": "<p>As Kendall mentions, it is impossible to move pieces out of a 3x3 grid in this manner. This is called the <a href=\"http://en.wikipedia.org/wiki/Lo_Shu_Square\">Lo Shu square</a>, and is the only unique solution to the 3x3 magic grid puzzle.</p><p>The reason for this is actually rather simple. If you look at the Lo Shu square, you'll notice that the even numbers always appear in corners. To demonstrate why this would be, note that each row and column must sum to an odd number. </p><p>If a row contains an even number of odd numbers, then its solution is either $2(2N+1)+2N=6N+2$ or $3(2N)=6N$, both of which are divisible by two, and therefore cannot add to 15. If a row contains an odd number of odd numbers, then its solution is either $1(2N+1)+2(2N)=6N+1$ or $3(2N+1)=6N+3$, both of which are odd and therefore can equal 15.</p><p>This means that each row must contain and odd number of odd numbers. In a 3x3 grid, a row must contain either 1 or 3 odd numbers. </p><p>If the center contains an odd number, then two adjacent edges must contain an odd number. However, if two edges contain even numbers, then the corner between them must contain an even. However, if this is the case, the opposing diagonal must also contain two even numbers - but at this point, if it does, then a row contains three even numbers.</p><p>In the following grid, it is clear that the question marks indicate positions that must be, but can't be, even.</p><pre><code>----------    ----------    ----------|  |  |  |    |  |EE|  |    |EE|EE|??|----------    ----------    ----------|  |EE|  | -> |EE|EE|  | -> |EE|EE|  |----------    ----------    ----------|  |  |  |    |  |  |  |    |??|  |  |----------    ----------    ----------</code></pre><p>It is trivial from this point to demonstrate that if there is an even number on an edge, then the grid is unsolvable. It is also trivial to demonstrate that if one even number is in a corner, the rest must be.</p><p>Therefore, every solution is the permutation of one solution: where the even numbers are in the corners; and if the even numbers are in the corners, then their positions are irrelevant, because a solution will always be a reflection of that position.</p>",
        "Score": "15"
    },
    {
        "Id": "132",
        "Text": "<p>I believe pirate 1 (fiercest) should give every odd-numbered pirate (3rd fiercest, 5th, etc.) 1 gold, starting from the least-fierce end, and take the remainder (if any) for himself. This has the unintuitive effect that if there are more than 400 pirates, the only way for the fiercest to survive is to take none for himself.</p><p>Let's start with small N and use inference:</p><p>N = 2: 1 takes all gold (200) for himself. He votes yes, 2 votes no, 1, being fiercest, breaks tie and takes all the gold</p><p>N = 3: 1 needs one vote for him. If he is killed, 3 gets nothing, so if he gives 3 1 piece, 3 votes for him, he wins 2-1.</p><p>N = 4: 1 just needs one other vote (and he breaks the tie by being fiercest). If he is killed, 3 gets nothing (as he becomes 2 in the previous case)</p><p>N = 5: 1 needs two votes, so he gives 1g to the two who would get nothing if he were killed, the current 3 and 5.</p><p>(somewhat) graphically:</p><pre><code>N = 2:        1 = 200        2 = 0N = 3:        1 = 199        2 = 0        3 = 1N = 4:        1 = 199        2 = 0        3 = 1        4 = 0N = 5:        1 = 198        2 = 0        3 = 1        4 = 0        5 = 1</code></pre><p>So we see that the fiercest pirate gives 1 gold to those who would get nothing for N-1. These happen to always be the odd-numbered pirates. Once the money runs out (N > 400), only the (odd) least fierce pirates get paid, since if they did not, enough would object to kill the </p>",
        "Score": "10"
    },
    {
        "Id": "134",
        "Text": "<p>According to Kendall and others, the puzzle isn't solvable for integers. This can be proved using the <a href=\"http://en.wikipedia.org/wiki/Lo_Shu_Square\">Lo Shu Square</a>.</p><p>But the problem statement says <em>\"A magic square (of order 3) is a 3x3 matrix consisting of <strong>distinct numbers</strong> from 1 to 9\"</em>, and doesn't explicitly specify integers, a solution with <em><strong>real numbers</strong></em> could be obtained.</p><p>Here's one:</p><pre><code>+---+---+---+|4.5| 8 |2.5|+---+---+---+| 3 | 7 | 5 |+---+---+---+|7.5| 2 |5.5|+---+---+---+</code></pre><p>I'd have used complex numbers, but the condition <em>\"numbers must be from 1 to 9\"</em> restricts it to real numbers.</p>",
        "Score": "9"
    },
    {
        "Id": "135",
        "Text": "<p>Each set of keys fundamentally represents a set of possible combinations of choices that need to be an allowed condition.  You add keys to deal with more possible situations, so as long as the number of situations that can occur is enumerable, then it should be possible to make a solution.</p><p>For example, in the original problem, you have the vizier with each of 4 slaves (4 cases) and 4 different cases of slaves (1,2,3), (1,2,4), (1,3,4) and (2,3,4).  It may be somewhat non-trivial to determine which keys go where, but if the possible cases that need to work can be enumerated, then the keys can be assigned.</p>",
        "Score": "1"
    },
    {
        "Id": "136",
        "Text": "<p>For the case of more M than C it becomes trivial as a canibal can run the ferry after some initial setup.  It starts with 1 M and 1C in the boat with C+1 M on the original shore.  The M takes the boat back and gets another M, leaving C Ms on the original shore, The Ms get to the other side and send the C back with the boat.  The C can now ferry alternating C's and Ms without issue.  The Ms will always outnumber the number left on either shore.</p><p>If M is 2 or more higher than C, then M can actually run the boat as well since they can start with 2 Ms in the boat and keep a higher number on both shores simultaneously while also operating the boat.</p>",
        "Score": "2"
    },
    {
        "Id": "137",
        "Text": "<p>Let's define <code>a b * c d</code> to represent the state of the river at any given time: <code>a</code> missionaries and <code>b</code> cannibals on the left, <code>c</code> missionaries and <code>d</code> cannibals on the right, and <code>*</code> being <code><</code> if the boat is on the left and <code>></code> if the boat is on the right.</p><p>The problem starts out in the state <code>M C < 0 0</code>, and we want to get <code>0 0 > M C</code>.</p><p>For the case of <code>M</code> being more than <code>C</code>, here's an algorithm to transfer 1 missionary and 1 cannibal at a time:</p><ul><li>Bring 1 missionary and 1 cannibal over. (<code>M-1 C-1 > 1 1</code>)</li><li>Bring the <em>cannibal</em> back. (<code>M-1 C < 1 0</code>; since <code>M > C</code>, <code>M-1 >= C</code>, as required.) </li><li>Bring 1 missionary and 1 cannibal over again. (<code>M-2 C-1 > 2 1</code>)</li><li>Bring a missionary back. (<code>M-1 C-1 < 1 1</code>).</li></ul><p>And then you're left with the case of <code>M-1</code> missionaries and <code>C-1</code> cannibals on one side of the river. Just keep repeating this procedure (it works by induction) until you have only missionaries on the left side of the river. Then you're home free.</p><p>For <code>M</code> equal to <code>C</code>, I don't think you'll have a solution for <code>M > 3</code>, because the solution for <code>M = 3</code> already depends on the fact that you can have <em>only</em> cannibals on one side and they won't be able to do anything to the missionaries no matter how many there are on one side.</p><p>The part of the solution where this applies looks something like this:</p><ul><li><code>3 1 < 0 2</code></li><li><code>1 1 > 2 2</code></li><li><code>2 2 < 1 1</code></li><li><code>0 2 > 3 1</code></li></ul><p>There's no way to get a similar arrangement for anything greater than three, because you can't send enough missionaries at once to balance out the rest of the cannibals.</p>",
        "Score": "13"
    },
    {
        "Id": "138",
        "Text": "<p>You could decide to partition the corners and use one for each level, writing even smaller numbers. Or tilting the numbers at different angles. But that sounds boring, why not use Arabic, Roman and Persian/Farsi (oops, there is some digit overlap) numerals at each level?</p><p>I consider sudoku puzzles that legitimately require trial and error unpure and stop solving them, but this is a topic for <a href=\"https://puzzling.stackexchange.com/questions/12/are-there-sudoku-puzzles-published-that-do-require-guessing\">separate questions</a>.</p>",
        "Score": "3"
    },
    {
        "Id": "139",
        "Text": "<p>Oh my. For large N ( > 400) this gets an exponential structure of strings of carnage that can be stopped at certain points: a simple strategy exists for each pirate of fierceness 400+100*2^n (negative n allowed until we start getting fractional pirates). No optimal strategy exists for the remaining leaders; they die.</p><p>Let's start with the first carnage at N>800.</p><p>There's at most 200 pirates who got any gold, and would prefer to keep it, but they have no say in it, for there's another 600 blood-thirsty jerks who believe they can murder the fiercest with full impunity and have nothing to lose (and either gain a chance for gold, or not gain anything).</p><p>The leaders are slaughtered until the total number drops to 800. Then the leader distributes gold to the bottom 600 at random (1 piece per pirate though).Each of those on the bottom, who got a gold coin will vote to keep it, because they won't earn more anyway, and have a chance to lose it. Then the top 200 including the tie-breaking boss joins with approval and with 400+tie votes they outvote these out of bottom 600 who didn't get any gold.</p><p>Now, assume one of the top 200 is an idiot and votes for sharks at the critical point. 200 satisfied with their coins and 199 currently-victims won't outvote the 400 who want blood (and money). The 400 keep killing until there's only 600 pirates left: 300 without gold, 200 with gold, and 100 potential victims if they don't come to agreement right now: gold distributed at random to 200 out of the bottom 500, the 100 come out alive, 300:300.</p><p>Again, assume an idiot botches the voting. 250 blood-thirsty pirates slaughter 50 leaders, then best 50 of them join the 200 satisfied to vote own survival.</p><p>You see the pattern?</p><p>Let's try upwards. In our 800-pirate population we have 600 blood-thirsty jerks, who need to be outvoted by 200 with gold and a certain number who just wants to live. Well, that number appears to be 400, bringing the total number to 1200. But if the population is bigger, these 400 know they can kill with impunity (and won't get any gold anyway) so 1200 is the next population threshold.</p><p>So, 25, 50, 100, 200, 400...</p><p>500 = 400+100, 600=400+200, 800=400+400, 1200=400+800</p><p>Each pirate of fierceness 400+100*2^n has the opportunity to come out of this penniless, alive, and stop the slaughter, in exchange for distributing all gold to the bottom 3/4 of the band, randomly.</p><p>Each other pirate above these specific ones, I think 400, correct me if I'm wrong, gets fed to the shark no matter what they offer.</p>",
        "Score": "5"
    },
    {
        "Id": "141",
        "Text": "<p>This answer is more about choosing the puzzle than general strategies. Once you have the grid, a lot of reduction tactics are the same as with Sudoku.</p><p>Playing around with timed versions of the Einstein puzzle like <a href=\"https://www.thinkpenguin.com/gnu-linux/einstein\" rel=\"nofollow\">this</a> can soon net you shortcuts for solving the grid. Granted, you get everything laid out and can start solving immediately, but our brain is more suited to certain types of cues. Some solved squares may help, but it all depends on its position and the other cues. Particularly the \"X is between A and B\" hints can be very helpful, especially when they are chained or you can place them immediately. Since most hints are relative, you get several new anchor points to try out. Perhaps their higher apparent benefit is also due to the way we process information, as they usually clear the most amount of possibilities upon placement and the same amount (2) as is-before when uncertain, reducing the problem space. In general, if you can solve any of the near-central squares, that can reduce the positioning options of the triplets significantly.</p><p>During plays, I've noticed a particular pattern that I can solve fast (as opposed to 15+ minutes). All my best time (2 min) games started like this, but I don't know if the speed can be attributed to just the initial layout. It's when you start with a solved square one square from the border that can be expanded with an in-between cue. It's better than border squares, since you can then also discard some guesses via is-a-neighbour cues, but still gives only one possible orientation.</p>",
        "Score": "1"
    },
    {
        "Id": "144",
        "Text": "<p>this is the <a href=\"http://en.wikipedia.org/wiki/Eulerian_path\" rel=\"nofollow\">Eulerian path problem</a></p><p>If there are more than 2 points with an odd number of bridges then the problem is impossible, when here are exactly 0 or 2 such points then it is possible, with 2 odd points you start at one and then end up at the other, with 0 you come back where you start.</p><p>The solution for the path is simple, </p><p>Start at a point with an odd number of bridges and add it to your path and remove it from the set, from there move further by picking any bridge forward, repeat until there are no more bridges at your current point.</p><p>Then at a point you passed and there are still bridges to cross split your path there and go over a bridge until you eventually come back to that point. Reconnect the path with the one you just followed.</p>",
        "Score": "3"
    },
    {
        "Id": "145",
        "Text": "<p>It would be easy to make an impossible puzzle like this. First, draw some rivers and temporarily number the areas that there are (not required, just used for reference in this answer):</p><p><img src=\"https://i.stack.imgur.com/mj05Z.png\" alt=\"rivers\"></p><p>Then, draw some bridges and count how many of the areas have an odd amount of bridges going out:</p><p><img src=\"https://i.stack.imgur.com/8DlSK.png\" alt=\"bridges\"></p><p>The red numbers are how many bridges there are that come out from that area. Since areas 1, 2, 4, and 6 have an odd number of bridges, this puzzle is complete! This is because <a href=\"http://en.wikipedia.org/wiki/Seven_Bridges_of_K%C3%B6nigsberg\" rel=\"nofollow noreferrer\">there has to be exactly zero or two areas with an odd number of bridges for the walk to be possible</a>.</p><p>To answer your question literally, no, there is no \"list\" or \"collection\" of these puzzles, since each one would be so similar and solved the same way that it would be pointless. The real puzzle is figuring out <em>why</em> there has to be zero or two nodes with an odd number of entry/exits (which is also discussed in the Wikipedia article linked above).</p>",
        "Score": "5"
    },
    {
        "Id": "146",
        "Text": "<p>Here's how to remove numbers from a full Sudoku puzzle to create one with a single unique solution:</p><ol><li>Remove a number,</li><li>Run a <a href=\"http://norvig.com/sudoku.html\" rel=\"nofollow noreferrer\">solver</a>, </li><li>Check if the puzzle is still <a href=\"https://stackoverflow.com/questions/5052866/how-to-show-a-sodoku-solution-is-unique\">unique</a>, </li><li>Repeat until solver is unable to find a solution, or solution is not unique.</li></ol>",
        "Score": "9"
    },
    {
        "Id": "147",
        "Text": "<blockquote>  <p>Nearly all the Times crossword grids have rotational symmetry: they  can be rotated 180 degrees and remain identical. Rarely, puzzles with  only vertical or horizontal symmetry can be found; yet rarer are  asymmetrical puzzles, usually when an unusual theme requires breaking  the symmetry rule. <strong>This rule has been part of the puzzle since the  beginning; when asked why, initial editor Margaret Farrar is said to  have responded, \"Because it is prettier.</strong>\"</p></blockquote><p><strong><em>SOURCE:</strong> <a href=\"http://www.nytimes.com/1992/02/16/magazine/crosswords-fiftyyears.html?ei=5070&en=eb226eeaee1ab061&ex=1237089600&pagewanted=all\">\"The Ins and Outs of Across and Down\" The New York Times Magazine, 1992-02-16.</a></em></p>",
        "Score": "18"
    },
    {
        "Id": "148",
        "Text": "<p>Quality crossword puzzles have had a <a href=\"http://www.cruciverb.com/index.php?action=ezportal;sa=page;p=21\">rotational symmetry requirement</a> for a very long time. It was determined early on in the development of the puzzle that the symmetry rule (along with the fully checked and all-over interlock rules) made the puzzles more interesting. (IMHO, that is because it puts interesting constraints on the beginnings of words towards the upper left corner, with mirrors of those constraints on the endings of words in the lower right.)</p><p>The NYT does expressly give the editor freedom to break the rules, <a href=\"http://www.cruciverb.com/index.php?action=ezportal;sa=page;p=16\">\"if the theme warrants\"</a>. But notably none of my searches for submissions guidelines to the NYT made any more explicit statements than that.</p>",
        "Score": "8"
    },
    {
        "Id": "150",
        "Text": "<ul><li>Look for patterns, such as <code>ing</code>, <code>tion</code>, <code>re</code>/<code>er</code>, <code>de</code>/<code>ed</code>, <code>qu</code>, <code>est</code>, <code>un</code>, <code>th</code>, etc.<ul><li>Remove the letters in these patterns first, then see if you can use the prefix/suffix with the remaining letters. (If you can't, then try another prefix/suffix. Some words just don't have prefixes/suffixes, though.)</li></ul></li><li>Look at only the consonants, since th hmn brn cn stll ndrstnd mst wrds wtht vwls.</li><li>Try compound words too (i.e. <code>nodbkoro</code> -> <code>knob doro</code> -> <code>knob door</code> -> <code>doorknob</code>).</li><li>If all else fails, consider each letter individually as the first letter of the word, and then quickly scan the letters for the last letter. The hamun biran is aslo sirpulgrisny good at rindaeg wdros wtih tiehr frist and lsat lteetr itnact.</li></ul>",
        "Score": "29"
    },
    {
        "Id": "151",
        "Text": "<p>Say there are</p><p>5 logicians <code>1, 2, 3, 4, 5</code></p><p>& 5 colors <code>A, B, C, D, E</code></p><p>One of the logician, say A, is chosen the leader. Everyone will call out the leader's hat color. The leader will call out the color that is missing from the remaining N-1 hat colors he can see. Two cases are possible:</p><p>If there is no repeating color, then it's easy to see that the leader will call out his own hat's color and they'll win. If there is a repeating color, then further two cases are possible:</p><ul><li>If the leader's color is repeated, then the logician with the same color as leader will call out his own color and they'll win.</li><li>If the leader's color is not repeated but someone else's color is, then idk...</li></ul><p>Help me to build upon this? This was too long for a comment..</p>",
        "Score": "-1"
    },
    {
        "Id": "153",
        "Text": "<p>You can cut 199 feet of the rope. Climb to the top, cut one rope, and cut all but 1 foot off the other. You don't <em>need</em> to fall... If you have 1 or 2 feet at the top, you can make a loop to hold on to.</p><p>If you want to get to the ground, you can cut <strong><em>200</em></strong> feet. Cut one rope and feed it through the hook, and tie one end around your waist while holding onto the other end. Cut the second rope, and tie it to the first. Then, holding one end, lower yourself down by letting it out.</p>",
        "Score": "7"
    },
    {
        "Id": "154",
        "Text": "<p>All 200 feet, as long as they're no more than 100 feet apart.</p><p>Take one end of one rope. Climb up the other. Tighten the first rope as much as possible, cut (or unhook) the one you just climbed up (keep ahold of it) and swing on the intact rope. Climb to the top of that one. Put the cut rope through the hook. Tie yourself a harness of some sort on one end of it, keep hold of the other, and cut/unhook the rope originally there (again keeping hold of it).  Lower yourself down until you are near the end of the rope you are attached to. Tie the spare rope to the end of it, and keep lowering yourself. Once within your safe fall zone, undo the harness and let go that side of the rope, and once you're down pull it through the hook.</p><p>As it has been clarified that \"the hooks are close enough that you can comfortably reach both of them,\" the description can be somewhat simplified. Climb up rope A, unhook B, tie it into a harness and re-hook it (such that you can lower yourself), unhook A and continue as above (lower halfway, tie A to the end of B, lower the rest of the way).</p>",
        "Score": "10"
    },
    {
        "Id": "155",
        "Text": "<p>Strictly speaking, you don't need to do anything because the puzzle already has a unique solution. Let's redefine your goal. Starting with a valid number grid, you want to eliminate numbers to arrive at a puzzle that <em>still</em> has a unique solution, but also has a specified level of difficulty (e.g., \"Easy\", \"Medium\", \"Hard\", etc.) and (optionally) has a symmetrical arrangement of numbers.</p><p>To do this, it helps to have a sudoku solver that can also tell you (a) if a puzzle has more than one solution, and (b) how difficult it is to solve. I'm using <a href=\"http://www.techfinesse.com/game/sudoku_solver.php\" rel=\"noreferrer\">Bill DuPree's sudoku solver</a> here, although you will get faster results using a solver that aborts as soon as it finds more than one solution instead of going on to count them all.</p><p>As others have suggested, a simple approach is to remove as many numbers as possible from the grid without losing the uniqueness of the solution. You will always get an empty top row if you clear the cells in strict sequential order, so you'll need to check them randomly. This is what I ended up with:</p><pre><code>. 6 7 2 . . . 4 .. . 9 . . 1 3 . .2 . . . . . . 8 .. 7 . . 8 . 2 3 .8 . 3 . . . . . .. . 6 . 4 . . . .. . . . 1 6 7 . 5. . . 5 . . . . .  24 numbers. . . . . . 8 9 .  Difficulty: ultra-diabolical</code></pre><p>We can get a symmetrical puzzle by clearing two cells at a time (cells <em>n</em> and 80-<em>n</em>), resulting in the following grid:</p><pre><code>. 6 7 . . . . . .4 . . . . 1 . 5 .2 . . 9 5 4 . . 7. . . . 8 . 2 . .. . . 1 2 5 . . .. . 6 . 4 . . . .3 . . 8 1 6 . . 5. 1 . 5 . . . . 3  27 numbers. . . . . . 8 9 .  Difficulty: easy</code></pre><p>Or, with a different random seed:</p><pre><code>5 . . . 3 8 . . 94 . . . 6 . . . .. 3 . . . . 6 . .1 . 5 6 . 9 . . 4. 4 . . . . . 7 .9 . . 3 . 7 5 . 8. . 4 . . . . 2 .. . . . 9 . . . 3  28 numbers6 . . 4 7 . . . 1  Difficulty: ultra-diabolical</code></pre><p>As you can see, this approach results in puzzles with widely varying difficulty levels. To get a puzzle with a particular difficulty level, you can simply repeat this process with different random numbers until you get a result you like. (Using a <a href=\"http://en.wikipedia.org/wiki/Hill_climbing\" rel=\"noreferrer\">hill climbing</a> algorithm might make this process more efficient, although I haven't looked into this.)</p><h2>Another approach</h2><p>Instead of <em>removing</em> numbers from a completed grid, you could try <em>adding</em> numbers to a <a href=\"http://web.archive.org/web/20130101205725/http://units.maths.uwa.edu.au/%7Egordon/sudokumin.php\" rel=\"noreferrer\">minimum sudoku puzzle</a> (i.e., a puzzle with a unique solution but only 17 filled cells). Even after filling cells to make these puzzles symmetrical, they should still be fairly challenging to solve.</p>",
        "Score": "5"
    },
    {
        "Id": "156",
        "Text": "<p>So far as people have bested the solution I could come up with, I suppose I'll post the one that was in the book as well (again paraphrased to account for some changes I made):</p><blockquote>  <p>Suppose the ropes are called rope A and rope B. Climb up rope A and cut about 99 feet off of rope B, leaving just enough to tie a loop with the remaining top portion. Tie this loop. Slide back down rope A, and tie one end of the cut portion of rope B to the bottom of this rope. Now, taking the other end, climb back up to the top, and feed that end through the loop until it's close to touching the ground. Then, swing over to the double rope you've just made, and slide rope A off of its hook, letting that end fall to the ground as well. Climb down this double rope which is hanging about 6 inches off the ground, and then pull on one of the ends to get it all down, which is about 199 feet.</p></blockquote><p>Of course, if you assume that you can feed the rope through the hook like a pulley, as other solutions have done, it also becomes possible to get all 200 feet, by eliminating the \"forming a loop\" step:</p><blockquote>  <p>Climb up rope A and take rope B off of its hook. Slide down and tie rope B to rope A. Taking the other end, climb back up the the hook and slide the end in your hand through the hook until it touches the ground. Then, swing over to the double rope, and slide rope A off its hook, letting that end fall to the ground as well. Climb down your double rope, and pull on one of the ends to slide the other end off the hook, getting all 200 feet of the rope down.</p></blockquote><hr><p>I've since found the old puzzle book that this puzzle came from (<a href=\"http://www.amazon.ca/Giant-Book-Mensa-Mind-Challenges/dp/0806920939\" rel=\"nofollow\">Giant Book of Mensa Mind Challenges</a>, 1998 ed., section 1, puzzle 196). The solution in there is presented as follows:</p><blockquote>  <p>First, tie the lower ends. Then climb up the first rope and cut the second one, close to the ceiling, leaving an end long enough to form a loop. (You can instead cut it off entirely if you slide the rope through the hook.) Hanging from the loop, cut the first rope at the hook. <strong>Be careful not to drop it.</strong> Then slide the rope through the loop until it's even. Climb down the double rope, and once on the floor, pull one end to get it all.</p></blockquote><p>This solution involves grabbing hold of the loop or hook and hanging from it while working with the other rope, which seems a bit dangerous. I prefer my strategy (which is the same except doesn't involve hanging 99.5 feet off the ground) which involves one more up/down trip but never puts you in a situation in which you might conceivably end up stuck hanging near the ceiling if you're not careful.</p>",
        "Score": "3"
    },
    {
        "Id": "161",
        "Text": "<p><a href=\"http://books.google.ca/books?id=U6RpAgAAQBAJ&pg=PA111\" rel=\"noreferrer\">This book</a> appears to have a puzzle with only 18 clues that is rotationally symmetrical.</p><pre><code>7 2 . | . . . | . . .. 5 . | . . 9 | . . .. . . | . 3 8 | . . .------+-------+-------. . . | 4 . . | 5 . .. . 3 | . . . | 9 . .. . 1 | . . 3 | . . .------+-------+-------. . . | 2 5 . | . . .. . . | 6 . . | . 3 .. . . | . . . | . 1 9</code></pre><p>But I still don't know if a rotationally symmetrical 17 exists.</p>",
        "Score": "10"
    },
    {
        "Id": "162",
        "Text": "<p>In order to construct the solution to this problem in the general space, it's helpful to ignore the Grand Vizier. The Grand Vizier can hold all the keys except one, which all the slaves hold, and that answers that component minimally.</p><p>I have discovered a generic method for generating solutions to these puzzles given arbitrary values. The general method relies on some stuff which I develop in the beginning, but if you want to just go ahead and read that, it's below.</p><p>tl;dr? This is how you do it: list out all the possible combinations of ones and zeros for $(N-R+1)$ ones, filling in the rest with zeros. Assign each unique combination to its own key, and boom! Generic solution matrix!</p><p>To cover the even more generic solution you've requested would take an insanely long document, and would probably best just be written as a paper. I'm not going to do that here, but I will generally outline how this might work.</p><hr><p><strong>A Method for $N$ or $N-1$ slaves</strong></p><p>I will demonstrate the method for $N$ of $N$ slaves, and $N-1$ of $N$ slaves, as well as a generic method below.</p><p>If it is $N$, then trivially give each slave a key - then they must all be together.</p><p>If it is $N-1$, then things become a little trickier. Construct a table with N rows and columns (including the first one, which is numbered):</p><pre><code>_______________S1|  |  |  |  |S2|  |  |  |  |S3|  |  |  |  |S4|  |  |  |  |S5|  |  |  |  |</code></pre><p>In this example, there are five slaves, numbered. Give the first two slaves a key:</p><pre><code>_______________S1| 1|  |  |  |S2| 1|  |  |  |S3|  |  |  |  |S4|  |  |  |  |S5|  |  |  |  |</code></pre><p>Then, for each remaining space in the first column, create a new key and copy it into the corresponding space in the first row:</p><pre><code>_______________S1| 1| 2| 3| 4|S2| 1|  |  |  |S3| 2|  |  |  |S4| 3|  |  |  |S5| 4|  |  |  |</code></pre><p>Then, insert new keys into the second column:</p><pre><code>_______________S1| 1| 2| 3| 4|S2| 1| 5|  |  |S3| 2| 5|  |  |S4| 3|  |  |  |S5| 4|  |  |  |</code></pre><p>Repeat the above until you have filled in the grid:</p><pre><code>_______________S1| 1| 2| 3| 4|S2| 1| 5| 6| 7|S3| 2| 5| 8| 9|S4| 3| 6| 8|10|S5| 4| 7| 9|10|</code></pre><p>This grid requires $N-1$ slaves to open the box. You also need to remember to give them the Vizier's key.</p><p>Your original problem's filled matrix is:</p><pre><code>____________S1| 1| 2| 3|S2| 1| 4| 5|S3| 2| 4| 6|S4| 3| 5| 6|</code></pre><p>In general, if you want $N-1$ slaves to open the box, you must have $N*(N-1)/2$ keys. For four slaves, this is $4*3/2=12$; for $5$ slaves, this is $5*4/2=10$. Add one key if you want a Vizier.</p><hr><p><strong>The Generic Method</strong></p><p>First, let's go back and change the way we've been representing this problem. Let's instead create a matrix of keys and slaves, and use 1s and 0s to represent which slaves hold which keys.</p><pre><code>4/4 Required  3/4 Required      2/4 Required ------------  ----------------  ------------Key|1|2|3|4|  Key|1|2|3|4|5|6|  Key|1|2|3|4|------------  ----------------  ------------ S1|1|0|0|0|   S1|1|1|1|0|0|0|   S1|1|1|1|0| S2|0|1|0|0|   S2|1|0|0|1|1|0|   S2|1|1|0|1| S3|0|0|1|0|   S3|0|1|0|1|0|1|   S3|1|0|1|1| S4|0|0|0|1|   S4|0|0|1|0|1|1|   S4|0|1|1|1|</code></pre><p>The question we have to ask is: why these particular combinations? If you notice, all columns in the 4/4 matrix have one 1; all in the 3/4 have 2; all in the 2/4 have 3; and trivially, all in the 1/4 have 4. This points to a formula: there exist $(N-R+1)$ copies of each key, where $N$ is the number of slaves, and R is the number required. I have yet to prove this, but it appears to be consistent. </p><p>Note, as a curiosity, that 4/4 and 2/4 are effectively the \"inverses\" of each other (i.e. 1 swaps with 0). With $5x5$, I'll demonstrate (but again, unfortunately, not prove) that the solutions for problems whose distance from the center of $(2,N)$ (which is $(N+2)/2)$ is equivalent are inverses.</p><p>Here are the 5x5 matrices:</p><pre><code>5/5 Required    4/5 Required               3/5 Required               2/5 Required--------------  -------------------------  -------------------------  -------------Key|1|2|3|4|5|  Key|1|2|3|4|5|6|7|8|9|10|  Key|1|2|3|4|5|6|7|8|9|10|  Key|1|2|3|4|5|--------------  -------------------------  -------------------------  -------------- S1|1|0|0|0|0|   S1|1|1|1|1|0|0|0|0|0| 0|   S1|1|1|1|1|1|1|0|0|0| 0|   S1|1|1|1|1|0| S2|0|1|0|0|0|   S2|1|0|0|0|1|1|1|0|0| 0|   S2|1|1|1|0|0|0|1|1|1| 0|   S2|1|1|1|0|1| S3|0|0|1|0|0|   S3|0|1|0|0|1|0|0|1|1| 0|   S3|1|0|0|1|1|0|1|1|0| 1|   S3|1|1|0|1|1| S4|0|0|0|1|0|   S4|0|0|1|0|0|1|0|1|0| 1|   S4|0|1|0|1|0|1|1|0|1| 1|   S4|1|0|1|1|1| S5|0|0|0|0|1|   S5|0|0|0|1|0|0|1|0|1| 1|   S5|0|0|1|0|1|1|0|1|1| 1|   S5|0|1|1|1|1|</code></pre><p>No, I won't make you suffer through 6x6 matrices, but these are worth a good inspection. Note that 4/5 and 3/5 are equivalent. $(N+2)/2$ for these is 3.5; 4 and 3 are equidistant and are inverses; so are 5 and 2. But this is an aside.</p><p><strong>So, this is ridiculous and all - what's the pattern here?</strong></p><p>Well, take a look again! The pattern is that the distribution of keys <strong>matches all possible combinations of ones and zeros for that number of keys.</strong> For instance, the 4/5 matrix has two keys. All of the columns of that matrix are the unique combinations of those numbers in this space.</p><p>The number of keys? That's just the factorial divided by duplicates! You have five entries in 4/5, so you have $5!$ combinations of keys - but you have to take out $3!$ for the three zeros, and $2!$ for the two ones, which gives you $5!/(3!*2!) = 10 \\mbox{ keys}$. For 3/4, it's $4!/(2!*2!) = 6\\mbox{ keys}$. For 3/11, there are $11!/(9!*2!) = 55\\mbox{ keys}$. For 2/40, there are $40!/(38!*2!) = 780\\mbox{ keys}$.</p><p>It's now possible to prove why equidistant matrices would be pseudo-inverses of each other, but the proof for this part is left to the reader. $N$ slaves, $K$ keys - $N!/(K!(N-K)!)$ </p><hr><p><strong>How do I make a solution matrix, then?</strong></p><p>List out all the possible combinations of ones and zeros for $(N-R+1)$ ones, filling in the rest with zeros. Assign each unique combination to its own key, and boom! Generic solution matrix!</p><hr><p><strong>But what about <em>my</em> problem?</strong></p><p>Your problem gives three different keyrings: the A-class, B-class, and C-class keyrings. In order to specify each set of keyrings, you need to append an additional set of restricting keys. These keys will be literally equal to the matches required for keys in each of the combinations. You can create an additional matrix to append to the problem to represent these combinations.</p><p>Each class's matrix is generated based on the number of that class required; everything else gets keys for that class. Then, remove sets of keys which are equivalently distributed to each participant.</p><p>The example you have provided is, quite frankly, too long to give a solution for in this answer. However, using this method, you can generate however many combinations and conditions you would like.</p>",
        "Score": "6"
    },
    {
        "Id": "164",
        "Text": "<p>An intuitive solution is to remove both the corner and edge, splitting them up, then move them back in an intelligent way. This can be done with:</p><pre><code>R U R' U' R U' R'</code></pre><p>then by solving again. </p><p>Or, you could just memorize an algorithm. A couple easy solutions:</p><pre><code>(R2 U2) (F R2 F') (U2 R' U R')(R' F R F') (R U' R' U) (R U' R' U2) (R U' R')</code></pre><p>It's also a good idea to actively avoid being stuck in this situation whenever possible.</p>",
        "Score": "6"
    },
    {
        "Id": "167",
        "Text": "<p>Hint: You can light both sides of one rope. Solution: </p><blockquote class=\"spoiler\">  <p> Light rope $A$ on both sides so that the rope will be gone in $30$ minutes. You need to light rope $B$ at the same time you light rope $A$. Once rope $A$ is gone, light the other side of rope $B$. Rope $B$ will be gone after another $15$ minutes. That will add up to $45$ minutes. </p></blockquote>",
        "Score": "59"
    },
    {
        "Id": "181",
        "Text": "<h2>No.</h2><p>Every move the pawn makes it switches from a white to a black square or vice versa. Therefore it must either touch an equal number of white and black squares with an even number of moves, or one more square of either color with an odd number of moves. (A move including initially placing it on the board.)</p><p>Because there are two more white squares than black squares (32 and 30) there is no way it can touch each square exactly once.</p><p>The same argument applies to show that the Knight's Tour cannot be completed on this board either.</p>",
        "Score": "22"
    },
    {
        "Id": "182",
        "Text": "<p>To get started on this problem, here is a general observation for any $n$: </p><blockquote>  <p>You can only measure intervals of time of the form  $$\\frac{m}{2^n}\\cdot 1\\mbox{h}$$</p></blockquote><p>where $m$ and $n$ are non-negative integers.</p><p><strong>Proof (using the <a href=\"http://www.artofproblemsolving.com/Wiki/index.php/Extreme_principle\" rel=\"nofollow\">extremal principle</a>)</strong>: </p><p>Suppose there was a number of ropes you could use to measure an interval which is not of the proposed form above. Take the minimum number of ropes $n$ for which this is possible, then $n≥2$ (as for $n=1$ it is not possible as shown in the question). </p><p>There must be a way of lighting the $n$ ropes so that the interval $\\ t = t_2-t_1$ between two \"distinct times\"<sup><strong>1</strong></sup>  $\\ t_1$ and $t_2$, where $t_1<t_2$, cannot be described by the above form. As $t_2>0$, there must be a rope $r$ that has completely burned down (otherwise, $t_2$ would not be a distinct time - see the footnote). Due to $t_1<t_2$, you can measure $t_1$ without using $r$ (so $n-1$ ropes suffice), which means that $t_1$ has the form above due to the minimal choice of $n$.</p><p>Consider the very last time $t_3$ rope $r$ is lit. By the same argument as above (you do not need $r$ to measure this time), it follows that $t_3$ has the above form. Accordingly, $\\left|t_3-t_1\\right|$ is also of that form. As $t = t_2-t_1 = (t_2-t_3)+(t_3-t_1)$ is by assumption not of the above form  (but $\\left|t_3-t_1\\right|$ is), it follows that $t_2-t_3$ is not of the form above either.</p><p>However, this cannot be true: </p><p>Look at amounts of time $t_{r,1},\\ldots,t_{r,l}$ that $r$ actually burns. These satisfy the relation $$n_1\\cdot t_{r,1} + \\ldots + n_1\\cdot t_{r,l} = 1\\mbox{h}$$</p><p>where $n_i = 1,2$, depending on whether $r$ burns at one or both ends. All the amounts of time $t_{r,1},\\ldots,t_{r,l-1}$ are of the above form, because they are measured without using $r$. So $t_{r,l}$ also has to be of the form above. But $t_{r,l} = t_2-t_3$, which is a contradiction to the conclusion of the last paragraph.</p><p>Therefore, the assumption that there is a number of ropes which can be used to measure an amount of time not of the form above has to be wrong.</p><hr><p><sup> 1. The start of the experiment or the time a rope has burned out, as there are no other possible events.</sup></p>",
        "Score": "12"
    },
    {
        "Id": "184",
        "Text": "<p>If you have an open slot on the left like this:</p><p><a href=\"https://i.stack.imgur.com/TEX1Y.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/TEX1Y.png\" alt=\"open slot on left\"></a></p><p>Then you can use this algorithm:</p><pre><code>(D (R U R') d'(L' U L) D')</code></pre><p>This algorithm is especially versatile since it can be modified to accommodate an empty slot in any other position by changing the first and last <code>D</code>s. Such as with <code>D2</code> for the back-left slot.</p><p>But if you want something that doesn't touch the F2L at all AND is quick to execute, then you'll have a harder time finding them. (Generally speaking, the heavier the constraints, the worse the algorithms will be.) My advice is that if you don't have any empty slots, then you might as well continue doing what you're doing. Or you can use the slightly longer algorithm given by @Emrakul.</p><p>Either way, once you learn a more advanced method, the solution to this problem would be to avoid being backed into a corner with this case at all. (:</p>",
        "Score": "0"
    },
    {
        "Id": "185",
        "Text": "<p>Split this into three groups of four, A1, A2, A3, A4; B1, B2...; C1, C2... Each step here corresponds to one weighing.</p><ul><li>Weigh A against B. <ul><li>If A > B, then weigh A1, B1, and B2 against B3, B4, and C1.<ul><li>If the weights are equal, then one of A2...4 is heavier; weigh A2 and A3. If they are equal, A4 is heavier. If one is heavier, then that ball is heaviest.</li><li>If the first group is heavier, then either A1 is heavier, or B3-4 is lighter. Compare B3 and B4; if they are equal, A1 is heavier; if they are different, the lightest is the lightest ball.</li><li>If the first group is lighter, then either B1 or B2 is lighter. Weigh them and see.</li></ul></li><li>If A < B, renumber all A-balls to B-balls, and perform the above steps.</li><li>If A = B, weigh A1, A2, A3 against C1, C2, C3<ul><li>If they are equal, then weigh A1 against C4.  If A1 is lighter, then C4 is the odd ball and it is heavy. If A1 is heavier, then C4 is the odd ball and it is light.</li><li>If A is heavier than C, weigh C1 against C2. If they are equal, then C3 is the odd ball and it is lighter. If they are not equal, then the lighter of the two balls is the lightest ball</li><li>If A is lighter than C, weigh C1 against C2. If they are equal, then C3 is the odd ball and it is heavier. If they are not equal, then the heavier of the two balls is the heaviest ball.</li></ul></li></ul></li></ul><p>We can work backwards from the third step to see, approximately, why this works. At the third weighing, the options need to be reduced to either two or three balls. This means that the second weighing must reduce to either two or three possible balls.</p><p>We know that the first step will remove either 1/3 or 2/3 of the possible solutions, no matter what you do. This means that, in the 1/3 case, you need to split the possibilities down from 8 into a group of 3, a group of 3, and a group of 2. From this, the third weighing points to the odd ball out. Because this case implies one set of balls is heavier, by virtue of finding the odd ball out, we know whether it's heavier or lighter, so we actually don't need to worry about this piece of information at all.</p><p>In the 2/3 case, you need to reduce the possibilities into a group of 3 and a group of 1, which is easy enough to do intuitively. Because we actually don't know the relative weight of the odd ball in this case, the information from the third weighing must be used to determine whether the ball is heavier or lighter.</p>",
        "Score": "43"
    },
    {
        "Id": "189",
        "Text": "<p>It turns out that you need four weights, measuring 1, 3, 9, and 27 pounds.</p><p>The trick here is that you can put weights on both sides of the scale. If you have an object of 2 pounds on the left side, you can place the 3-lb. weight on the right side and the 1-lb. weight on the <em>left</em> side for the scale to balance.</p><p>Similarly, if the object weighs 5 pounds, you put the 9-lb. weight on the right side and the 3-lb. and 1-lb. on the left side.</p><hr><p>If you have a set of weights that can balance any weight from $1$ to $N$ pounds, then they can also balance any weight from $-1$ to $-N$ pounds just by switching the sides of the scale that you place them on. So the next weight you'd want to add would weigh $2N + 1$ pounds, and then you can balance any weight from $1$ to $3N + 1$ pounds on the scale.</p><p>So, starting with the 1-lb. weight, which can balance any weight from $1$ to $1$ pounds, we get $2(1) + 1 = 3$ pounds for the next weight, and they can balance anything up to $1 + 3 = 4$ pounds.</p><p>Then, for those two weights, we get $2(4) + 1 = 9$, and they can balance up to $1 + 3 + 9 = 13$ pounds.</p><p>And finally, for all three of those weights, we get $2(13) + 1 = 27$, and they can balance up to $1 + 3 + 9 + 27 = 40$ pounds, as required.</p><p>In general, to measure any weight up to $n$ pounds, you will need at least $\\lceil\\log_3(2n)\\rceil$ weights due to the above formula.</p>",
        "Score": "31"
    },
    {
        "Id": "191",
        "Text": "<p>It turns out that the magic squares form a vector space. You can add them (by adding each corresponding entry), multiply them by scalars (by multiplying every entry by the same number), and invert them (take the negative of each entry) around a zero element (the magic square where everything is zero), and they will still stay magic squares.</p><p>And this vector space has a basis of size three, as follows:</p><pre><code> 0 -3  0     0  2  1     1  2  0-1 -1 -1  ,  2  1  0  ,  0  1  2-2  1 -2     1  0  2     2  0  1</code></pre><p>This means that given any three constants <code>a</code>, <code>b</code> and <code>c</code>, you can define the following magic square:</p><pre><code>          c,   2b + 2c - 3a,             b     2b - a,      b + c - a,        2c - ab + 2c - 2a,              a,   2b + c - 2a</code></pre><p>where the magic constant is <code>3b + 3c - 3a</code>.</p><p>The classical (Lo Shu) magic square has <code>a = 1</code>, <code>b = 2</code>, and <code>c = 4</code>.</p><p>So if you are given three numbers in the V shape (or its reflections and rotations):</p><pre><code>xx .. .... .. xxxx .. ..</code></pre><p>then you can make a magic square out of it. In fact, as long as you're given any three positions so that for each position, when you take the number in that position from each square in the basis and form a vector out of it, you end up with three linearly independent vectors, then you can still uniquely determine a magic square out of it by solving a system of linear equations.</p><hr><p>I don't know anything about the higher-order squares, though. That can be left for another answer.</p>",
        "Score": "18"
    },
    {
        "Id": "196",
        "Text": "<p>I believe (and can almost prove) that for an $n \\times n$ square you need $(n-1)^2-1=n^2-2n$ givens. First, let us ignore the requirement that the diagonal sums match the row/column sums.  Then you can fill the upper $(n-1) \\times (n-1)$ grid however you want.  If you pick the upper right element, you can calculate the row sum $R.$  The last element of the next $n-2$ rows is now fixed, as is the bottom element in the first $n-1$ columns.  If $S$ is the sum of the original set of entries, the sum of the elements in the last column so far is $(n-1)R-S$, as is the sum of the elements in the last row, so you pick the lower right to be $R-((n-1)R-S)=S-(n-2)R$.  This shows there are $(n-1)^2+1$ free elements in a square where the rows and columns have a common sum.  </p><p>The diagonals introduce two constraints, so you would expect to subtract two from this count for fully magic squares.  This would give $(n-1)^2-1$ as the number of free elements, in agreement with Joe Z's calculation for $3 \\times 3$.  I have not found a way to show these constraints are not redundant in the general case, but it seems unlikely.</p><p>The $n \\times n$ matrices form a vector space, and I am counting the dimension of the subspace that is magic.</p>",
        "Score": "4"
    },
    {
        "Id": "200",
        "Text": "<p>In the online realm, these are known as \"hidden object/picture\" games, and the definition also matches those which appear in books. <a href=\"http://en.wikipedia.org/wiki/Puzzle_video_game#Hidden_object_game\">From Wikipedia (emph. not mine)</a>:</p><blockquote>  <p>A <strong>hidden object game</strong> (sometimes called <strong>hidden picture</strong>) is a genre of puzzle video game in which the player must find items from a list that are hidden within a picture.</p></blockquote><p>In essence, \"Where's Waldo\" is just a simpler version of this game, in which the list of items you are looking for has a length of one (though if I recall, there are sometimes more objects to find in Waldo).</p><p>Physical copies of these games also, I believe, can go by the same name.</p>",
        "Score": "11"
    },
    {
        "Id": "202",
        "Text": "<p>If A doesn't know the colour of his hat, then at least one of B and C must be wearing a red hat, because if they were both wearing black, then A would know immediately that he was wearing a red one.</p><p>B knows this as well. But if C were wearing a black hat, then B would know that she was wearing a red one because of that. So since B doesn't know, C must be wearing a red hat.</p><p>C knows this as well. So C knows that his hat is red.</p><hr><p>As for the bonus question, no, we cannot know what colour hat either A or B is wearing. All else we can deduce from the problem is that at least one of B and C is wearing a red hat, but C wearing a red hat fulfills that already, so B could be wearing either colour of hat. And in general, nobody can know what A's hat's colour is, since nobody can see it. So all four arrangements where C wears a red hat are possible.</p>",
        "Score": "17"
    },
    {
        "Id": "204",
        "Text": "<p>The solution appears as follows:</p><p><img src=\"https://i.stack.imgur.com/bCp9L.png\" alt=\"solution to the puzzle\"></p><p>It's a bit rough, but it shows the right places to cut the shape.</p>",
        "Score": "8"
    },
    {
        "Id": "205",
        "Text": "<p>The first thing to do is divide the figure into a number of sections which is a multiple of four. The easiest way to do this is to split it up into smaller triangles:</p><p><img src=\"https://i.stack.imgur.com/Zw2dL.png\" alt=\"triangle division\"></p><p>Note that there are now 12 sections, which divides into sections of 3. Three triangles forms a  square and a smaller triangle. We know, as a result, that a square must go here (another way to do this is that the triangle in the corner must be part of a shape of three parts):</p><p><img src=\"https://i.stack.imgur.com/rrbWj.png\" alt=\"enter image description here\"></p><p>From this, it becomes clear where the rest of the divisions lie. The remaining triangle, as part of the triangular section, must be part of a set of three, so as a result, we know that it is as follows:</p><p><img src=\"https://i.stack.imgur.com/6O2m4.png\" alt=\"enter image description here\"></p><p>The rest of the divisions are simple:</p><p><img src=\"https://i.stack.imgur.com/UInIz.png\" alt=\"enter image description here\"></p><p>And, as a side note, for future reference, <a href=\"http://livegeometry.com/\">LiveGeometry</a> is a wonderful little tool.</p>",
        "Score": "18"
    },
    {
        "Id": "207",
        "Text": "<p>Suppose we divide an acre into 30 sections.</p><p>Then:</p><ul><li>Barry and Harry can plow 15 sections an hour.</li><li>Barry and Larry can plow 10 sections an hour.</li><li>Larry and Harry can plow 6 sections an hour.</li></ul><p>If we add all these three up and divide by 2, we get the number of sections all three of them can plow in one hour:</p><ul><li>Barry, Harry, and Larry can plow 15.5 sections an hour.</li></ul><p>(Looks like poor Larry works 10 times slower than either of the other two boys.)</p><p>Thus, it will take all three of them (30/15.5 hours) = about 1 hour and 56 minutes to plow an acre.</p>",
        "Score": "5"
    },
    {
        "Id": "209",
        "Text": "<p>This has since become one of my favorite logic puzzles! <strong>I highly recommend that you make an effort to solve this one first.</strong> It's a lot of fun.</p><p>We know the kids' ages must multiply to 72. Therefore, we need to find all combinations of three numbers that multiply to 72. 72 has the prime factors 2*2*2*3*3. For convenience, I've added a list of their sums for the student's house number.</p><pre><code>1 + 1 + 72 = 741 + 2 + 36 = 391 + 3 + 24 = 281 + 4 + 18 = 231 + 6 + 12 = 191 + 8 + 9  = 182 + 2 + 18 = 222 + 3 + 12 = 172 + 4 + 9  = 152 + 6 + 6  = 143 + 3 + 8  = 143 + 4 + 6  = 13</code></pre><p>Here we see a list of possible ages and house numbers. Now, of course, we know that the student comes back and tells the teacher <strong>\"I need more information.\"</strong> If the student didn't need more information, then the student's house number would appear once in this list. </p><p>However, because the student needs more information, we know that the student's house number must appear more than once in this list. The only combinations for which this is the case are <code>2+6+6=14</code> and <code>3+3+8=14</code>. </p><p>The teacher tells the student that the oldest plays piano, implying that there must be just one oldest child. Therefore, the answer can't be 2, 6, and 6, because there is no oldest. The answer must, therefore, be 3, 3, and 8.</p>",
        "Score": "22"
    },
    {
        "Id": "213",
        "Text": "<p>The answer is slightly trickier than you might think at first - it has to do with a quirk in the calendar we currently use, the <a href=\"https://en.wikipedia.org/wiki/Gregorian_calendar#Adoption\">Gregorian Calendar</a>.</p><p>The Gregorian Calendar was instated by Pope Gregory (hence the name) in 1582 to account for a slight disparity in the Julian calendar that made the days drift about 18.75 hours every century. The Julian Calendar had one leap day every 4 years, which accounted for the gap between 365 days and a year, but overshot it by just a little too much to be unnoticeable. By the time Jesus had been gone for over 1,500 years, the dates on which they were celebrating Easter (and the dates on which the seasons were occurring) were drifting much too far away from their original dates for the church's comfort.</p><p>So, the Catholic Church under Pope Gregory decided to remove the leap years for three of the four century years, specifically the ones that weren't divisible by 400. So while the year 1600 had a February 29 as usual, the years 1700, 1800, and 1900 didn't have an extra day at all. This corrected the disparity by an average of 18 hours every century, to the Catholic Church's satisfaction. (The remaining 0.75 hours will only start to be noticeable in about 20,000 years' time.)</p><p>Now, what does this have to do with the question at hand? Well, the Gregorian calendar runs a 400-year cycle with its leap years in this way, and every 400 years there are exactly 97 occurrences of February 29. This is a total of (365 * 400 + 97) = 146097 days, which happens to be exactly divisible by 7. So every 400 years, the days of the week complete one cycle as well.</p><p>This means that ultimately, the beginning of a century can only have one of up to four possible days of the week, because after every fourth century, the cycle restarts.</p><p>With this in mind, let's check the dates for each of the first days of the century from 2101 to 2401 (as centuries begin with the -01 year; the -00 year is actually the <em>last</em> year of the <em>previous</em> century):</p><ul><li>January 1, 2101 falls on a <em>Saturday</em>.</li><li>January 1, 2201 falls on a <em>Thursday</em>.</li><li>January 1, 2301 falls on a <em>Tuesday</em>.</li><li>January 1, 2401 falls on a <em>Monday</em>.</li></ul><p>And this cycle repeats for every set of 400 years onwards.</p><p>So tough luck, the first day of the century <em>never</em> falls on a Sunday. The probability is <strong>zero</strong>.</p><hr><p>But wait, what if we <em>do</em> count the -00 year as the beginning of the century? Then, the days of the week are as follows:</p><ul><li>January 1, 2100 falls on a <em>Friday</em>.</li><li>January 1, 2200 falls on a <em>Wednesday</em>.</li><li>January 1, 2300 falls on a <em>Monday</em>.</li><li>January 1, 2400 falls on a <em>Saturday</em>.</li></ul><p>As it happens, Sunday doesn't appear here either, and in fact, Sunday is the <em>only</em> day of the week that doesn't appear in either list, and so is the only day that cannot be the beginning of a century, regardless of whether you consider -00 or -01 to be the first year.</p>",
        "Score": "30"
    },
    {
        "Id": "215",
        "Text": "<blockquote class=\"spoiler\">  <p> <strong>0 percent.</strong> This is because the first day of a century can never fall on a Sunday.</p></blockquote><p>There are 365 days in a year (which is not a leap year) - which is exactly 52 weeks plus one day. Therefore, from a common year to the following year, New Year's Day advances by one day of the week.</p><p>From a leap year (which has 366 days) to the year following, New Year's Day advances by two  days of the week.</p><ol><li><p>So, advancing from one century to another, we advance a 100 days plus a few extra days for leap years. Every fourth year, except the year divisible by 100 is a leap year making a total of 24 ($\\frac{100}{4} - 1$) leap years in a century. Therefore, we advance a total of 124 days of the week in a century. 124 divided by 7 leaves a remainder of 5 - so we're only moving 5 days of the week ahead.</p></li><li><p><strong>After 2 centuries have passed</strong>, we advance $5 + 5 = 10$ days - or <strong>3 days</strong> from the start, because $10 =3 \\mod 7$.</p></li><li><p><strong>After 3 centuries</strong>, we've advanced 15 days - or <strong>1 day</strong> from the start.</p></li><li><p>On the <strong>4th century</strong>, however, we have to take into account the fact that <em>years divisible by 400 have a leap day</em>. So, instead of advancing 20 days, we advance 21 days - or <strong>0 days</strong>. <strong>We're back at the day we started 4 centuries ago.</strong></p></li></ol><p>We can now check the 4 days that a century can begin with by examining the days of 2100 to 2400:</p><ul><li><p>The century 2100 starts on a <em>Friday</em>.</p></li><li><p>2200 subsequently starts 5 days later, a <em>Wednesday</em>.</p></li><li><p>2300 then starts on 3 days ahead of Friday, i.e. a <em>Monday</em>,</p></li><li><p>and 2400 starts on <em>Saturday</em>, i.e. 1 day from Friday.</p></li><li><p>We return to a Friday in the year 2500, and the cycle continues.</p></li></ul><p>Because of this <em>Friday-Wednesday-Monday-Saturday cycle</em>, we cannot have a century starting on Sunday (and a Tuesday and a Thursday) - which is a good thing because we get an extra holiday!</p>",
        "Score": "10"
    }
]